@article{bennettLogicalReversibilityComputation1973,
  title = {Logical {{Reversibility}} of {{Computation}}},
  author = {Bennett, C. H.},
  year = {1973},
  month = nov,
  journal = {IBM Journal of Research and Development},
  volume = {17},
  number = {6},
  pages = {525--532},
  issn = {0018-8646, 0018-8646},
  doi = {10.1147/rd.176.0525},
  urldate = {2023-03-20}
}

@misc{beverlandAssessingRequirementsScale2022,
  title = {Assessing Requirements to Scale to Practical Quantum Advantage},
  author = {Beverland, Michael E. and Murali, Prakash and Troyer, Matthias and Svore, Krysta M. and Hoefler, Torsten and Kliuchnikov, Vadym and Low, Guang Hao and Soeken, Mathias and Sundaram, Aarthi and Vaschillo, Alexander},
  year = {2022},
  month = nov,
  number = {arXiv:2211.07629},
  eprint = {arXiv:2211.07629},
  publisher = {{arXiv}},
  urldate = {2023-03-20},
  abstract = {While quantum computers promise to solve some scientifically and commercially valuable problems thought intractable for classical machines, delivering on this promise will require a large-scale quantum machine. Understanding the impact of architecture design choices for a scaled quantum stack for specific applications, prior to full realization of the quantum system, is an important open challenge. To this end, we develop a framework for quantum resource estimation, abstracting the layers of the stack, to estimate resources required across these layers for large-scale quantum applications. Using a tool that implements this framework, we assess three scaled quantum applications and find that hundreds of thousands to millions of physical qubits are needed to achieve practical quantum advantage. We identify three qubit parameters, namely size, speed, and controllability, that are critical at scale to rendering these applications practical. A goal of our work is to accelerate progress towards practical quantum advantage by enabling the broader community to explore design choices across the stack, from algorithms to qubits.},
  archiveprefix = {arxiv}
}

@inproceedings{bichselSilqHighlevelQuantum2020,
  title = {Silq: A High-Level Quantum Language with Safe Uncomputation and Intuitive Semantics},
  shorttitle = {Silq},
  booktitle = {Proceedings of the 41st {{ACM SIGPLAN Conference}} on {{Programming Language Design}} and {{Implementation}}},
  author = {Bichsel, Benjamin and Baader, Maximilian and Gehr, Timon and Vechev, Martin},
  year = {2020},
  month = jun,
  pages = {286--300},
  publisher = {{ACM}},
  address = {{London UK}},
  doi = {10.1145/3385412.3386007},
  urldate = {2023-03-20},
  abstract = {Existing quantum languages force the programmer to work at a low level of abstraction leading to unintuitive and cluttered code. A fundamental reason is that dropping temporary values from the program state requires explicitly applying quantum operations that safely uncompute these values.},
  isbn = {978-1-4503-7613-6},
  langid = {english}
}

@book{clermanModernFortranStyle2012,
  title = {Modern {{Fortran}}: Style and Usage},
  shorttitle = {Modern {{Fortran}}},
  author = {Clerman, Norman S. and Spector, Walter},
  year = {2012},
  publisher = {{Cambridge University Press}},
  address = {{New York}},
  isbn = {978-0-521-51453-8 978-0-521-73052-5},
  lccn = {QA76.73.F25 C56 2012}
}

@inproceedings{goswamiQuantumDistributedComputing2016,
  title = {Quantum {{Distributed Computing}} with {{Shaped Laser Pulses}}},
  booktitle = {13th {{International Conference}} on {{Fiber Optics}} and {{Photonics}}},
  author = {Goswami, Rohit and Goswami, Debabrata},
  year = {2016},
  pages = {W4C.3},
  publisher = {{OSA}},
  address = {{Kanpur}},
  doi = {10/gf5mrr},
  urldate = {2019-08-01},
  abstract = {Shaped laser pulses can control decoherence under quantum adiabatic method of logic operations to result in a possible scalable quantum computer by distributing the computing load on a set of optically adiabatic quantum computing nodes.},
  isbn = {978-1-943580-22-4},
  langid = {english}
}

@incollection{greenIntroductionQuantumProgramming2013,
  title = {An {{Introduction}} to {{Quantum Programming}} in {{Quipper}}},
  author = {Green, Alexander S. and Lumsdaine, Peter LeFanu and Ross, Neil J. and Selinger, Peter and Valiron, Beno{\^i}t},
  year = {2013},
  volume = {7948},
  eprint = {1304.5485},
  primaryclass = {quant-ph},
  pages = {110--124},
  doi = {10.1007/978-3-642-38986-3_10},
  urldate = {2023-03-20},
  abstract = {Quipper is a recently developed programming language for expressing quantum computations. This paper gives a brief tutorial introduction to the language, through a demonstration of how to make use of some of its key features. We illustrate many of Quipper's language features by developing a few well known examples of Quantum computation, including quantum teleportation, the quantum Fourier transform, and a quantum circuit for addition.},
  archiveprefix = {arxiv}
}

@book{hundtQuantumComputingProgrammers2022,
  title = {Quantum {{Computing}} for {{Programmers}}},
  author = {Hundt, Robert},
  year = {2022},
  month = feb,
  edition = {First},
  publisher = {{Cambridge University Press}},
  doi = {10.1017/9781009099974},
  urldate = {2023-03-20},
  abstract = {This introduction to quantum computing from a classical programmer's perspective is meant for students and practitioners alike. Over 25 fundamental algorithms are explained with full mathematical derivations and classical code for simulation, using an open-source code base developed from the ground up in Python and C++. After presenting the basics of quantum computing, the author focuses on algorithms and the infrastructure to simulate them efficiently, beginning with quantum teleportation, superdense coding, and Deutsch-Jozsa. Coverage of advanced algorithms includes the quantum supremacy experiment, quantum Fourier transform, phase estimation, Shor's algorithm, Grover's algorithm with derivatives, quantum random walks, and the Solovay\textendash Kitaev algorithm for gate approximation. Quantum simulation is explored with the variational quantum eigensolver, quantum approximate optimization, and the Max-Cut and Subset-Sum algorithms. The book also discusses issues around programmer productivity, quantum noise, error correction, and challenges for quantum programming languages, compilers, and tools, with a final section on compiler techniques for transpilation.},
  isbn = {978-1-00-909997-4 978-1-00-909817-5},
  langid = {english}
}

@article{j.QuantumAlgorithmImplementations2022,
  title = {Quantum {{Algorithm Implementations}} for {{Beginners}}},
  author = {J., Abhijith and Adedoyin, Adetokunbo and Ambrosiano, John and Anisimov, Petr and Casper, William and Chennupati, Gopinath and Coffrin, Carleton and Djidjev, Hristo and Gunter, David and Karra, Satish and Lemons, Nathan and Lin, Shizeng and Malyzhenkov, Alexander and Mascarenas, David and Mniszewski, Susan and Nadiga, Balu and O'Malley, Daniel and Oyen, Diane and Pakin, Scott and Prasad, Lakshman and Roberts, Randy and Romero, Phillip and Santhi, Nandakishore and Sinitsyn, Nikolai and Swart, Pieter J. and Wendelberger, James G. and Yoon, Boram and Zamora, Richard and Zhu, Wei and Eidenbenz, Stephan and B{\"a}rtschi, Andreas and Coles, Patrick J. and Vuffray, Marc and Lokhov, Andrey Y.},
  year = {2022},
  month = dec,
  journal = {ACM Transactions on Quantum Computing},
  volume = {3},
  number = {4},
  eprint = {1804.03719},
  primaryclass = {quant-ph},
  pages = {1--92},
  issn = {2643-6809, 2643-6817},
  doi = {10.1145/3517340},
  urldate = {2023-03-20},
  abstract = {As quantum computers become available to the general public, the need has arisen to train a cohort of quantum programmers, many of whom have been developing classical computer programs for most of their careers. While currently available quantum computers have less than 100 qubits, quantum computing hardware is widely expected to grow in terms of qubit count, quality, and connectivity. This review aims to explain the principles of quantum programming, which are quite different from classical programming, with straightforward algebra that makes understanding of the underlying fascinating quantum mechanical principles optional. We give an introduction to quantum computing algorithms and their implementation on real quantum hardware. We survey 20 different quantum algorithms, attempting to describe each in a succinct and self-contained fashion. We show how these algorithms can be implemented on IBM's quantum computer, and in each case, we discuss the results of the implementation with respect to differences between the simulator and the actual hardware runs. This article introduces computer scientists, physicists, and engineers to quantum algorithms and provides a blueprint for their implementations.},
  archiveprefix = {arxiv}
}

@article{johanssonQuTiPOpensourcePython2012,
  title = {{{QuTiP}}: {{An}} Open-Source {{Python}} Framework for the Dynamics of Open Quantum Systems},
  shorttitle = {{{QuTiP}}},
  author = {Johansson, J. R. and Nation, P. D. and Nori, Franco},
  year = {2012},
  month = aug,
  journal = {Computer Physics Communications},
  volume = {183},
  number = {8},
  eprint = {1110.0573},
  primaryclass = {cond-mat, physics:physics, physics:quant-ph},
  pages = {1760--1772},
  issn = {00104655},
  doi = {10.1016/j.cpc.2012.02.021},
  urldate = {2023-03-20},
  abstract = {We present an object-oriented open-source framework for solving the dynamics of open quantum systems written in Python. Arbitrary Hamiltonians, including time-dependent systems, may be built up from operators and states defined by a quantum object class, and then passed on to a choice of master equation or Monte-Carlo solvers. We give an overview of the basic structure for the framework before detailing the numerical simulation of open system dynamics. Several examples are given to illustrate the build up to a complete calculation. Finally, we measure the performance of our library against that of current implementations. The framework described here is particularly well-suited to the fields of quantum optics, superconducting circuit devices, nanomechanics, and trapped ions, while also being ideal for use in classroom instruction.},
  archiveprefix = {arxiv}
}

@article{johanssonQuTiPPythonFramework2013,
  title = {{{QuTiP}} 2: {{A Python}} Framework for the Dynamics of Open Quantum Systems},
  shorttitle = {{{QuTiP}} 2},
  author = {Johansson, J. R. and Nation, P. D. and Nori, Franco},
  year = {2013},
  month = apr,
  journal = {Computer Physics Communications},
  volume = {184},
  number = {4},
  eprint = {1211.6518},
  primaryclass = {quant-ph},
  pages = {1234--1240},
  issn = {00104655},
  doi = {10.1016/j.cpc.2012.11.019},
  urldate = {2023-03-20},
  abstract = {We present version 2 of QuTiP, the Quantum Toolbox in Python. Compared to the preceding version [Comput. Phys. Comm. 183 (2012) 1760], we have introduced numerous new features, enhanced performance, made changes in the Application Programming Interface (API) for improved functionality and consistency within the package, as well as increased compatibility with existing conventions used in other scientific software packages for Python. The most significant new features include efficient solvers for arbitrary time-dependent Hamiltonians and collapse operators, support for the Floquet formalism, and new solvers for Bloch-Redfield and Floquet-Markov master equations. Here we introduce these new features, demonstrate their use, and give a summary of the important backward-incompatible API changes introduced in this version.},
  archiveprefix = {arxiv}
}

@book{lyonUsingAnsFortran1980,
  title = {Using {{Ans Fortran}}},
  author = {Lyon, G. E.},
  year = {1980},
  publisher = {{National Bureau of Standards}},
  abstract = {This FORTRAN volume presents, in order: a set of quick and clear reference charts for ANS FORTRAN 66 syntax; observations on using only standard FORTRAN 65 features; instructions on circumventing and extending FORTRAN 66 with the least harm; an appraisal of the new FORTRAN 77 in terms of FORTRAN 65 constructs. Although the chapters comprise much material that has appeared in other technical memoranda or published articles, heavily recast sections have been re-refereed. The four chapters address programmers concerned with FORTRAN transportability, managers engaged in programming standards, and other practitioners interested in system influences upon languages. Since the text touches upon several general programming aspects (input/output, storage allocation, storage lifetimes and protection, control structures), the volume's appeal will extend beyond the immediate FORTRAN community.},
  googlebooks = {8ymHAQAACAAJ},
  langid = {english}
}

@article{peresUnperformedExperimentsHave1978,
  title = {Unperformed Experiments Have No Results},
  author = {Peres, Asher},
  year = {1978},
  month = jul,
  journal = {American Journal of Physics},
  volume = {46},
  number = {7},
  pages = {745--747},
  issn = {0002-9505, 1943-2909},
  doi = {10.1119/1.11393},
  urldate = {2023-03-20},
  langid = {english}
}

@article{renesQuantumInformationTheory,
  title = {Quantum {{Information Theory}}},
  author = {Renes, Joseph M},
  langid = {english}
}

@article{wiebeQuantumAlgorithmData2012,
  title = {Quantum {{Algorithm}} for {{Data Fitting}}},
  author = {Wiebe, Nathan and Braun, Daniel and Lloyd, Seth},
  year = {2012},
  month = aug,
  journal = {Physical Review Letters},
  volume = {109},
  number = {5},
  pages = {050505},
  issn = {0031-9007, 1079-7114},
  doi = {10.1103/PhysRevLett.109.050505},
  urldate = {2023-03-20},
  langid = {english}
}
