@article{goswamiDSEAMSDeferredStructural2020,
  title = {D-{{SEAMS}}: {{Deferred Structural Elucidation Analysis}} for {{Molecular Simulations}}},
  shorttitle = {D-{{SEAMS}}},
  author = {Goswami, Rohit and Goswami, Amrita and Singh, Jayant K.},
  date = {2020-04-27},
  journaltitle = {Journal of Chemical Information and Modeling},
  shortjournal = {J. Chem. Inf. Model.},
  volume = {60},
  pages = {2169--2177},
  publisher = {{American Chemical Society}},
  issn = {1549-9596, 1549-960X},
  doi = {10.1021/acs.jcim.0c00031},
  archiveprefix = {arXiv},
  langid = {english},
  number = {4}
}

@book{clermanModernFortranStyle2012,
  title = {Modern {{Fortran}}: Style and Usage},
  shorttitle = {Modern {{Fortran}}},
  author = {Clerman, Norman S. and Spector, Walter},
  date = {2012},
  publisher = {{Cambridge University Press}},
  location = {{New York}},
  isbn = {978-0-521-51453-8 978-0-521-73052-5},
  pagetotal = {334},
  keywords = {FORTRAN (Computer program language)},
  annotation = {OCLC: ocn743298762}
}

@article{petersonF2PYToolConnecting2009,
  title = {{{F2PY}}: A Tool for Connecting {{Fortran}} and {{Python}} Programs},
  shorttitle = {{{F2PY}}},
  author = {Peterson, Pearu},
  date = {2009},
  journaltitle = {International Journal of Computational Science and Engineering},
  shortjournal = {IJCSE},
  volume = {4},
  number = {4},
  pages = {296},
  issn = {1742-7185, 1742-7193},
  doi = {10.1504/IJCSE.2009.029165},
  url = {http://www.inderscience.com/link.php?id=29165},
  urldate = {2021-08-30},
  langid = {english}
}

@article{waltNumPyArrayStructure2011,
  title = {The {{NumPy Array}}: {{A Structure}} for {{Efficient Numerical Computation}}},
  shorttitle = {The {{NumPy Array}}},
  author = {van der Walt, S. and Colbert, S. C. and Varoquaux, G.},
  date = {2011-03},
  journaltitle = {Computing in Science Engineering},
  volume = {13},
  number = {2},
  pages = {22--30},
  issn = {1521-9615},
  doi = {10/d8k4p9},
  abstract = {In the Python world, NumPy arrays are the standard representation for numerical data and enable efficient implementation of numerical computations in a high-level language. As this effort shows, NumPy performance can be improved through three techniques: vectorizing calculations, avoiding copying data in memory, and minimizing operation counts.},
  keywords = {Arrays,Computational efficiency,data structures,Finite element methods,high level language,high level languages,mathematics computing,numerical analysis,Numerical analysis,numerical computation,numerical computations,numerical data,NumPy,numpy array,Performance evaluation,programming libraries,Python,Python programming language,Resource management,scientific programming,Vector quantization},
  annotation = {03947}
}

@article{virtanenSciPyFundamentalAlgorithms2020,
  title = {{{SciPy}} 1.0: Fundamental Algorithms for Scientific Computing in {{Python}}},
  shorttitle = {{{SciPy}} 1.0},
  author = {Virtanen, Pauli and Gommers, Ralf and Oliphant, Travis E. and Haberland, Matt and Reddy, Tyler and Cournapeau, David and Burovski, Evgeni and Peterson, Pearu and Weckesser, Warren and Bright, Jonathan and van der Walt, Stéfan J. and Brett, Matthew and Wilson, Joshua and Millman, K. Jarrod and Mayorov, Nikolay and Nelson, Andrew R. J. and Jones, Eric and Kern, Robert and Larson, Eric and Carey, C. J. and Polat, İlhan and Feng, Yu and Moore, Eric W. and VanderPlas, Jake and Laxalde, Denis and Perktold, Josef and Cimrman, Robert and Henriksen, Ian and Quintero, E. A. and Harris, Charles R. and Archibald, Anne M. and Ribeiro, Antônio H. and Pedregosa, Fabian and van Mulbregt, Paul},
  options = {useprefix=true},
  date = {2020-03},
  journaltitle = {Nature Methods},
  shortjournal = {Nat Methods},
  volume = {17},
  number = {3},
  pages = {261--272},
  publisher = {{Nature Publishing Group}},
  issn = {1548-7105},
  doi = {10.1038/s41592-019-0686-2},
  url = {https://www.nature.com/articles/s41592-019-0686-2},
  urldate = {2021-07-13},
  abstract = {SciPy is an open-source scientific computing library for the Python programming language. Since its initial release in 2001, SciPy has become a de facto standard for leveraging scientific algorithms in Python, with over 600 unique code contributors, thousands of dependent packages, over 100,000 dependent repositories and millions of downloads per year. In this work, we provide an overview of the capabilities and development practices of SciPy 1.0 and highlight some recent technical developments.},
  issue = {3},
  langid = {english},
  annotation = {Bandiera\_abtest: a Cc\_license\_type: cc\_by Cg\_type: Nature Research Journals Primary\_atype: Reviews Subject\_term: Biophysical chemistry;Computational biology and bioinformatics;Technology Subject\_term\_id: biophysical-chemistry;computational-biology-and-bioinformatics;technology}
}

@article{sebilleauMsSpec1MultipleScattering2011,
  title = {{{MsSpec}}-1.0: {{A}} Multiple Scattering Package for Electron Spectroscopies in Material Science},
  shorttitle = {{{MsSpec}}-1.0},
  author = {Sébilleau, Didier and Natoli, Calogero and Gavaza, George M. and Zhao, Haifeng and Da Pieve, Fabiana and Hatada, Keisuke},
  date = {2011-12},
  journaltitle = {Computer Physics Communications},
  shortjournal = {Computer Physics Communications},
  volume = {182},
  number = {12},
  pages = {2567--2579},
  issn = {00104655},
  doi = {10.1016/j.cpc.2011.07.012},
  url = {https://linkinghub.elsevier.com/retrieve/pii/S0010465511002591},
  urldate = {2021-08-31},
  abstract = {We present a multiple scattering package to calculate the cross-section of various spectroscopies namely photoelectron diffraction (PED), Auger electron diffraction (AED), X-ray absorption (XAS), low-energy electron diffraction (LEED) and Auger photoelectron coincidence spectroscopy (APECS). This package is composed of three main codes, computing respectively the cluster, the potential and the cross-section. In the latter case, in order to cover a range of energies as wide as possible, three different algorithms are provided to perform the multiple scattering calculation: full matrix inversion, series expansion or correlation expansion of the multiple scattering matrix. Numerous other small Fortran codes or bash/csh shell scripts are also provided to perform specific tasks. The cross-section code is built by the user from a library of subroutines using a makefile.},
  langid = {english},
  keywords = {Cross-sections,Multiple scattering,Spectroscopies}
}

@book{lyonUsingAnsFortran1980,
  title = {Using {{Ans Fortran}}},
  author = {Lyon, G. E.},
  date = {1980},
  eprint = {8ymHAQAACAAJ},
  eprinttype = {googlebooks},
  publisher = {{National Bureau of Standards}},
  abstract = {This FORTRAN volume presents, in order: a set of quick and clear reference charts for ANS FORTRAN 66 syntax; observations on using only standard FORTRAN 65 features; instructions on circumventing and extending FORTRAN 66 with the least harm; an appraisal of the new FORTRAN 77 in terms of FORTRAN 65 constructs. Although the chapters comprise much material that has appeared in other technical memoranda or published articles, heavily recast sections have been re-refereed. The four chapters address programmers concerned with FORTRAN transportability, managers engaged in programming standards, and other practitioners interested in system influences upon languages. Since the text touches upon several general programming aspects (input/output, storage allocation, storage lifetimes and protection, control structures), the volume's appeal will extend beyond the immediate FORTRAN community.},
  langid = {english},
  pagetotal = {109}
}

@article{goldbergWhatEveryComputer1991,
  title = {What Every Computer Scientist Should Know about Floating-Point Arithmetic},
  author = {Goldberg, David},
  date = {1991-03},
  journaltitle = {ACM Computing Surveys},
  shortjournal = {ACM Comput. Surv.},
  volume = {23},
  number = {1},
  pages = {5--48},
  issn = {0360-0300, 1557-7341},
  doi = {10.1145/103162.103163},
  url = {https://dl.acm.org/doi/10.1145/103162.103163},
  urldate = {2021-08-13},
  abstract = {Floating-point arithmetic is considered as esoteric subject by many people. This is rather surprising, because floating-point is ubiquitous in computer systems: Almost every language has a floating-point datatype; computers from PCs to supercomputers have floating-point accelerators; most compilers will be called upon to compile floating-point algorithms from time to time; and virtually every operating system must respond to floating-point exceptions such as overflow. This paper presents a tutorial on the aspects of floating-point that have a direct impact on designers of computer systems. It begins with background on floating-point representation and rounding error, continues with a discussion of the IEEE floating point standard, and concludes with examples of how computer system builders can better support floating point.},
  langid = {english}
}

@inproceedings{ChevillardJoldesLauter2010,
  title = {Sollya: {{An}} Environment for the Development of Numerical Codes},
  booktitle = {Mathematical Software - {{ICMS}} 2010},
  author = {Chevillard, S. and Joldeş, M. and Lauter, C.},
  editor = {Fukuda, K. and van der Hoeven, J. and Joswig, M. and Takayama, N.},
  options = {useprefix=true},
  date = {2010-09},
  series = {Lecture Notes in Computer Science},
  volume = {6327},
  pages = {28--31},
  publisher = {{Springer}},
  location = {{Heidelberg, Germany}},
  abstract = {Sollya has become a mature tool for the development of numerical software. With about 175 built-in algorithms and a broad extensibility, it offers a complete tool-chain for fixed- and floating-point software and hardware design. Its features include on-the-fly faithful rounding, specialized approximation algorithms and extensive support for floating-point code generation.},
  keywords = {computer algebra,development tool,faithful rounding,function approximation,numerical software}
}
