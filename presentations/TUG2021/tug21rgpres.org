#+TITLE: Continuous Integration and TeX with Org-mode
#+SUBTITLE:  TeX in the cloud
#+AUTHOR: Rohit Goswami,\textsc{\scriptsize\ MInstP}
#+EMAIL:  rog32@hi.is
#+DATE:   \today

* Configuration :ignoreheading:ignore:
:PROPERTIES:
:VISIBILITY: folded
:BEAMER_env: ignoreheading
:END:

** Lisp Setup :ignoreheading:ignore:
:PROPERTIES:
:VISIBILITY: folded
:BEAMER_env: ignoreheading
:END:

#+BEGIN_SRC emacs-lisp :exports none :eval always :results none
(require 'ox-extra)
(ox-extras-activate '(ignore-headlines))
(org-babel-tangle)
(setq org-latex-minted-options
  '(("bgcolor" "white") ("breaklines" "true") ("linenos" "true") ("style" "tango")))
(add-hook 'after-save-hook '(lambda () (org-beamer-export-to-latex)))
#+END_SRC

** Beamer Theme :ignoreheading:ignore:
:PROPERTIES:
:BEAMER_env: ignoreheading
:VISIBILITY: folded
:END:
#+begin_src latex :exports none :results none :tangle beamerthemeExecushares.sty :eval always
\usepackage{tikz}
\usetikzlibrary{calc}
\usepackage[none]{hyphenat}
\usepackage{fontspec}
\defaultfontfeatures{Ligatures=TeX}

\newif\ifbeamer@pixelitem
\beamer@pixelitemtrue
\DeclareOptionBeamer{nopixelitem}{\beamer@pixelitemfalse}
\ProcessOptionsBeamer

% define colours
% taken from pickton on Adobe Kuler:
% https://kuler.adobe.com/Some-Kind-Of-Execushares-color-theme-3837185/
\definecolor{ExecusharesRed}{RGB}{156,57,45}
\definecolor{ExecusharesBlack}{RGB}{43,40,40}
\definecolor{ExecusharesBlue}{RGB}{35,34,128}
\definecolor{ExecusharesWhite}{RGB}{255,255,243}
\definecolor{ExecusharesGrey}{RGB}{107,110,108}

% use Adobe's Source Pro fonts:
% Source Serif Pro: https://github.com/adobe-fonts/source-serif-pro
% Source Sans Pro: https://github.com/adobe-fonts/source-sans-pro
% Source Code Pro: https://github.com/adobe-fonts/source-code-pro
\setmainfont{Yanone Kaffeesatz}
\setsansfont{Overpass}
\setmonofont{Cascadia Code PL}

% To use with pdflatex,
% comment the fontspec package at the top
%\usepackage{sourceserifpro}
%\usepackage{sourcesanspro}
%\usepackage{sourcecodepro}

% set colours
\setbeamercolor{itemize item}{fg=ExecusharesBlue}
\setbeamercolor{enumerate item}{fg=ExecusharesBlue}
\setbeamercolor{alerted text}{fg=ExecusharesBlue}
\setbeamercolor{section in toc}{fg=ExecusharesBlack}

% set fonts
\setbeamerfont{itemize/enumerate body}{size=\large}
\setbeamerfont{itemize/enumerate subbody}{size=\normalsize}
\setbeamerfont{itemize/enumerate subsubbody}{size=\small}

\ifbeamer@pixelitem
% make the itemize bullets pixelated >
\setbeamertemplate{itemize item}{
	\tikz{
		\draw[fill=ExecusharesBlue,draw=none] (0, 0) rectangle(0.1, 0.1);
		\draw[fill=ExecusharesBlue,draw=none] (0.1, 0.1) rectangle(0.2, 0.2);
		\draw[fill=ExecusharesBlue,draw=none] (0, 0.2) rectangle(0.1, 0.3);
	}
}
% make the subitems also pixelated >, but a little smaller and red
\setbeamertemplate{itemize subitem}{
	\tikz{
		\draw[fill=ExecusharesRed,draw=none] (0, 0) rectangle(0.075, 0.075);
		\draw[fill=ExecusharesRed,draw=none] (0.075, 0.075) rectangle(0.15, 0.15);
		\draw[fill=ExecusharesRed,draw=none] (0, 0.15) rectangle(0.075, 0.225);
	}
}
\fi

% disable navigation
\setbeamertemplate{navigation symbols}{}

% custom draw the title page above
\setbeamertemplate{title page}{}

% again, manually draw the frame title above
\setbeamertemplate{frametitle}{}

% disable "Figure:" in the captions
\setbeamertemplate{caption}{\tiny\insertcaption}
\setbeamertemplate{caption label separator}{}

% since I don't know a better way to do this, these are all switches
% doing `\setcounter{showProgressBar}{0}` will turn the progress bar off (I turn it off for Appendix slides)
% etc
\newcounter{showProgressBar}
\setcounter{showProgressBar}{1}
\newcounter{showSlideNumbers}
\setcounter{showSlideNumbers}{1}
\newcounter{showSlideTotal}
\setcounter{showSlideTotal}{1}

% Set beginning of backup slides
% This lets you having the slides counter ending with the "thank you" slide and avoiding the annoying question "why is the thank you at slide 38/41?"
\newcommand{\backupbegin}{
   \newcounter{finalframe}
   \setcounter{finalframe}{\value{framenumber}}
}
\newcommand{\backupend}{
   \setcounter{framenumber}{\value{finalframe}}
}

% use \makeatletter for our progress bar definitions
% progress bar idea from http://tex.stackexchange.com/a/59749/44221
% slightly adapted for visual purposes here
\makeatletter
\newcount\progressbar@tmpcounta% auxiliary counter
\newcount\progressbar@tmpcountb% auxiliary counter
\newdimen\progressbar@pbwidth %progressbar width
\newdimen\progressbar@tmpdim % auxiliary dimension

\newdimen\slidewidth % auxiliary dimension
\newdimen\slideheight % auxiliary dimension

% make the progress bar go across the screen
%\progressbar@pbwidth=12.8cm
\progressbar@pbwidth=\the\paperwidth
\slidewidth=\the\paperwidth
\slideheight=\the\paperheight

% use tikz to draw everything
% it may not be the best, but it's easy to work with
% and looks good
% TODO: base title slide and contents slide on something other than slide numbers :/
\setbeamertemplate{background}{
	% deal with progress bar stuff
	% (calculate where it should go)
	\progressbar@tmpcounta=\insertframenumber
	\progressbar@tmpcountb=\inserttotalframenumber
	\progressbar@tmpdim=\progressbar@pbwidth
	\divide\progressbar@tmpdim by 100
	\multiply\progressbar@tmpdim by \progressbar@tmpcounta
	\divide\progressbar@tmpdim by \progressbar@tmpcountb
	\multiply\progressbar@tmpdim by 100

	\begin{tikzpicture}
		% set up the entire slide as the canvas
		\useasboundingbox (0,0) rectangle(\the\paperwidth,\the\paperheight);

		% the background
		\fill[color=ExecusharesWhite] (0,0) rectangle(\the\paperwidth,\the\paperheight);

		% separate the drawing based on if we're the first (title) slide or not
		\ifnum\thepage=1\relax
			% the title page
			% draw the fills
			\fill[color=ExecusharesRed] (0, 4cm) rectangle(\slidewidth,\slideheight);

			% draw the actual text
			\node[anchor=south,text width=\slidewidth-1cm,inner xsep=0.5cm] at (0.5\slidewidth,4cm) {\color{ExecusharesWhite}\Huge\textbf{\inserttitle}};
			\node[anchor=north east,text width=\slidewidth-1cm,align=right] at (\slidewidth-0.4cm,4cm) {\color{ExecusharesBlack}\tiny\insertsubtitle};
			\node[above] at(0.5\slidewidth,2.3cm) {\color{ExecusharesBlack}\tiny by};
			\node at (0.5\slidewidth,2cm) {\color{ExecusharesBlack}\LARGE\insertauthor};

			% add the date in the corner
			\node[anchor=south east] at(\slidewidth,0cm) {\color{ExecusharesGrey}\tiny\insertdate};
		\else
			% NOT the title page
			% title bar
			\fill[color=ExecusharesRed] (0, \slideheight-1cm) rectangle(\slidewidth,\slideheight);

			% swap the comment on these to add section titles to slide titles
			%\node[anchor=north,text width=11.8cm,inner xsep=0.5cm,inner ysep=0.25cm] at (6.4cm,9.6cm) {\color{ExecusharesWhite}\Large\textbf{\insertsectionhead: \insertframetitle}};
			\node[anchor=north,text width=\slidewidth-1cm,inner xsep=0.5cm,inner ysep=0.25cm] at (0.5\slidewidth,\slideheight) {\color{ExecusharesWhite}\huge\textbf{\insertframetitle}};

			% if we're showing a progress bar, show it
			% (I disable the progress bar and slide numbers for the "Appendix" slides)
			\ifnum \value{showProgressBar}>0\relax%
				% the the progress bar icon in the middle of the screen
				\draw[fill=ExecusharesGrey,draw=none] (0cm,0cm) rectangle(\slidewidth,0.25cm);
				\draw[fill=ExecusharesRed,draw=none] (0cm,0cm) rectangle(\progressbar@tmpdim,0.25cm);

				% bottom information
				\node[anchor=south west] at(0cm,0.25cm) {\color{ExecusharesGrey}\tiny\vphantom{lp}\insertsection};
				% if slide numbers are active
				\ifnum \value{showSlideNumbers}>0\relax%
					% if slide totals are active
					\ifnum \value{showSlideTotal}>0\relax%
						% draw both slide number and slide total
						\node[anchor=south east] at(\slidewidth,0.25cm) {\color{ExecusharesGrey}\tiny\insertframenumber/\inserttotalframenumber};
					\else
						% slide totals aren't active, don't draw them
						\node[anchor=south east] at(\slidewidth,0.25cm) {\color{ExecusharesGrey}\tiny\insertframenumber};
					\fi
				\fi
			% don't show the progress bar?
			\else
				% section title in the bottom left
				\node[anchor=south west] at(0cm,0cm) {\color{ExecusharesGrey}\tiny\vphantom{lp}\insertsection};
				% if we're showing slide numbers
				\ifnum \value{showSlideNumbers}>0\relax%
					% if slide totals are active
					\ifnum \value{showSlideTotal}>0\relax%
						% draw both slide number and slide total
						\node[anchor=south east] at(\slidewidth,0cm) {\color{ExecusharesGrey}\tiny\insertframenumber/\inserttotalframenumber};
					\else
						% slide totals aren't active, don't draw them
						\node[anchor=south east] at(\slidewidth,0cm) {\color{ExecusharesGrey}\tiny\insertframenumber};
					\fi
				\fi
			\fi
		\fi
	\end{tikzpicture}
}
\makeatother

% add section titles
\AtBeginSection{\frame{\sectionpage}}
\setbeamertemplate{section page}
{
	\begin{tikzpicture}
		% set up the entire slide as the canvas
		\useasboundingbox (0,0) rectangle(\slidewidth,\slideheight);
		%\fill[color=ExecusharesWhite] (0,0) rectangle(\the\paperwidth,\the\paperheight);
		\fill[color=ExecusharesWhite] (-1cm, 2cm) rectangle (\slidewidth, \slideheight+0.1cm);
		\fill[color=ExecusharesRed] (-1cm, 0.5\slideheight-1cm) rectangle(\slidewidth, 0.5\slideheight+1cm);
		\node[text width=\the\paperwidth-1cm,align=center] at (0.4\slidewidth, 0.5\slideheight) {\color{ExecusharesWhite}\Huge\textbf{\insertsection}};
	\end{tikzpicture}
}
#+end_src

** TeX Configuration :ignoreheading:ignore:
:PROPERTIES:
:VISIBILITY: folded
:BEAMER_env: ignoreheading
:END:

#
# LaTeX Stuff
#

#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc toc:nil
#+INFOJS_OPT: view:nil toc:nil ltoc:nil mouse:underline buttons:0 path:https://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:

#+LATEX_COMPILER: xelatex
#+LATEX_HEADER: \PassOptionsToPackage{unicode=true}{hyperref}
#+LATEX_HEADER: \PassOptionsToPackage{hyphens}{url}
#+LATEX_HEADER: \PassOptionsToPackage{dvipsnames,svgnames*,x11names*,table}{xcolor}
#+LATEX_HEADER: \usepackage{amssymb,amsmath}
#+LATEX_HEADER: \usepackage{mathtools}
#+LATEX_HEADER: \usepackage{physics}
#+LATEX_HEADER: \usepackage{hyperref}
#+LATEX_HEADER: % Make use of float-package and set default placement for figures to H
#+LATEX_HEADER: \usepackage{float}
#+LATEX_HEADER: \floatplacement{figure}{H}

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger,unknownkeysallowed,aspectratio=169,colorblocks]
#+startup: beamer
#+BEAMER_THEME: Execushares
#+BEAMER_FRAME_LEVEL: 2
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)

# References
#+LATEX_HEADER: \usepackage[doi=false,isbn=false,url=false,eprint=false]{biblatex}
#+LATEX_HEADER: \bibliography{~/GDrive/zotLib.bib}

* Introduction
\scriptsize
- Find me here: https://rgoswami.me
- Who?
  + *Rohit Goswami* MInstP
    - Doctoral Researcher in the Jonsson Group, University of Iceland, Faculty of Physical Sciences and Science Institute
** A block :B_ignoreheading:BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:

#+DOWNLOADED: screenshot @ 2021-08-05 20:53:54
#+ATTR_LaTeX: :width 0.4\linewidth
[[file:images/A_block/2021-08-05_20-53-54_screenshot.png]]

#+ATTR_LaTeX: :width 0.4\linewidth
file:./images/quansightlabs.png
** A block :B_ignoreheading:BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:

#+ATTR_LaTeX: :width 0.6\linewidth
file:./images/physUoI.png
#+ATTR_LaTeX: :width 0.4\linewidth
file:./images/rannisLogo.png
#+ATTR_LaTeX: :width 0.4\linewidth
file:./images/ccLogo.png

* Big Picture
- ~TeX~ is the lingua franca of academic communities
- Collaborations with ~TeX~ revolve around proprietary systems
  + Overleaf
- *Or* collaborators require some expertise with ~TeX~
* Mitigation Mechanisms
#+begin_quote
Everyone wants ~TeX~ output without writing ~TeX~
#+end_quote
- ~pandoc~, ~orgmode~ promise ~TeX~ without the pain
- Cloud build machines are cheap to deploy now
** Goals
- A nonexpert ~TeX~ workflow which requires no proprietary tools
  + Transparent ~git~ and CI setup
- Expert friendly in terms of templating
* Writing TeX
** A block :B_ignoreheading:BMCOL:
:PROPERTIES:
:BEAMER_col: 0.6
:END:

#+begin_src latex :exports code
\documentclass{article}
\author{John Doe}
\title{Astounding Discoveries}
\begin{document}
\maketitle
\section{TeX}
Hello World
\end{document}
#+end_src

#+RESULTS:
#+begin_export latex
\documentclass{article}
\author{John Doe}
\title{Astounding Discoveries}
\begin{document}
\maketitle
\section{TeX}
Hello World
\end{document}
#+end_export

** A screenshot :BMCOL:B_example:
:PROPERTIES:
:BEAMER_col: 0.4
:END:
- Not bad
  + Fairly comprehensive
- Quickly gets out of hand
** No Column :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:
#+BEGIN_EXPORT latex
\vspace{\fill}
#+END_EXPORT

*Trivial for all examples which fit on slides*

* Splitting Code
- ~.cls~ files :: Loaded with ~\documentclass~ and ~\usepackage~
- ~.sty~ files :: Style files or packages (including beamer themes)
- ~.rc~ files :: Control files for build systems (~.latexmkrc~ or ~Makefile~)

#+BEGIN_EXPORT latex
\vspace{\fill}
#+END_EXPORT

- What CTAN handles typically
  + Popularly managed by ~texlive~ distributions
- Abstracts ~TeX~ and ~LaTeX~ (styling) away from document writing
  + Great for collaboration
* Straying Away
** A block :B_ignoreheading:BMCOL:
:PROPERTIES:
:BEAMER_col: 0.6
:END:
*** Orgmode
#+begin_src bash :results none :exports code
#+author: John Doe
#+title: Astounding Discoveries
 * TeX
Hello World
#+end_src

\scriptsize
#+begin_src emacs-lisp
(org-BACKEND-export-to-FRONT)
(org-latex-export-to-latex)
#+end_src

** A screenshot :BMCOL:B_example:
:PROPERTIES:
:BEAMER_col: 0.4
:END:
*** Pandoc Markdown
#+begin_src markdown
# TeX
Hello World
#+end_src

\scriptsize
#+begin_src bash
pandoc -s thing.md -o thing.tex --metadata title="Astounding Discoveries" author="John Doe"
#+end_src
** No Column :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:
#+BEGIN_EXPORT latex
\vspace{\fill}
#+END_EXPORT

*Appears* more readable and easier to write however...
* Polluted Outputs

#+begin_src bash :exports both
wc -l {base,orgOne,pandocOne}.tex
#+end_src

#+RESULTS:
|  8 | base.tex      |
| 15 | orgOne.tex    |
| 63 | pandocOne.tex |

- Generated files involve _template substitution_
* Pandoc Substitution
- Top down approach
- Fixed locations in a template (e.g. [[http://zenyodasap.surge.sh/][zenYoda]])
  + Variables expanded into ~TeX~
- YAML metadata

\scriptsize
#+begin_src latex :exports code
$for(header-includes)$
$header-includes$
$endfor$
#+end_src

#+begin_src yaml :results none
header-includes:
    - \numberwithin{figure}{section}
    - \numberwithin{equation}{section}
#+end_src
* Orgmode Substitution
:PROPERTIES:
:BEAMER_col: 0.5
:END:

- Bottom up approach
- ~tangle~ to an output
  + Structure defined per-file

\scriptsize
#+begin_src
#+TITLE: Continuous Integration and TeX with Org-mode
#+SUBTITLE:  TeX in the cloud
#+LATEX_COMPILER: xelatex
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [unknownkeysallowed,aspectratio=169]
#+LATEX_HEADER: \usepackage{biblatex}
#+ATTR_LaTeX: :width 0.4\linewidth
#+end_src

#+begin_quote
Not strictly true (preset variables)
#+end_quote
* Conceptual Differences
- ~org~ exporter options assume only one output
  + Allows arbitrary ~emacs-lisp~ evaluations
  + Sharing configurations can be clunky
- ~pandoc~ shares configuration system for multiple outputs
  + Sane defaults, good templating options
  + Easy to share templates
* Continuous Integration
- No one likes switching computers to test
  + MacOS, Windows (WSL often), Many Linux distributions
- There are far too many options nowadays
  + Wercker, +Travis CI+, Shippable, GitLab CI, _Github Actions_
- Mostly transient ~docker~ or ~nix~ based systems
  + Setup can be annoying without ~nix~
** TeX Gains
- Single reproducible source of truth for ~TeX~
  + The CI machine configuration
* Teaching CI about TeX
- Relying on build machine OS ~texlive~ is fragile
  + ~texliveonfly~ can get packages "on the fly"
\scriptsize
** Basic TeXLive Profile
#+begin_src ini
selected_scheme scheme-basic
TEXDIR /tmp/texlive
TEXMFCONFIG ~/.texlive/texmf-config
TEXMFHOME ~/texmf
TEXMFLOCAL /tmp/texlive/texmf-local
TEXMFSYSCONFIG /tmp/texlive/texmf-config
TEXMFSYSVAR /tmp/texlive/texmf-var
TEXMFVAR ~/.texlive/texmf-var
option_doc 0
option_src 0
#+end_src
* TexLive CI Script
\scriptsize
#+begin_src bash
export PATH=/tmp/texlive/bin/x86_64-linux:$PATH
if ! command -v texlua > /dev/null; then
  wget http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz
  tar -xzf install-tl-unx.tar.gz
  cd install-tl-20*
  ./install-tl --profile=$1
  cd ..
fi
tlmgr install luatex scheme-small \
  biber         \
  beamer        \
  xetex         \
  pdflatex      \
  latexmk       \
  etoolbox      \
  minted        \
  texliveonfly
tlmgr option -- autobackup 0
tlmgr update --self --all --no-auto-install
#+end_src
* GitHub Actions TeXLive
\scriptsize
#+begin_src yaml
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - name: Install package
        run: |
          sudo apt-get install -y python-pygments emacs
      - name: Setup LaTeX
        run: |
          export PATH=/tmp/texlive/bin/x86_64-linux:$PATH
          export PATH=$HOME/texmf/bin:$PATH
          scripts/getTexLive.sh $(pwd)/scripts/texlive.profile
#+end_src
* Minimal Lisp for TeX
- Running functions
- Setting variables

\scriptsize
#+BEGIN_SRC emacs-lisp :exports code :eval never :results none
(require 'ox-extra) ;; :ignoreheading:ignore:
(ox-extras-activate '(ignore-headlines))
(org-babel-tangle)
(setq org-latex-pdf-process (list "latexmk -shell-escape -f -pdfxe %f"))
(setq org-latex-listings 'minted)
(setq org-latex-minted-options
      '(("bgcolor" "white") ("breaklines" "true") ("linenos" "true") ("style" "tango")))
(add-hook 'after-save-hook '(lambda () (org-beamer-export-to-latex) t)) ;; Export
#+END_SRC

* Org Syntax for TeX
- Source blocks :: ~#+begin_src <lang> :exports <code/none/results> :eval <never> +#end_src~
- Direct ~TeX~ export :: ~#+begin_export <lang> #+end_export~

#+DOWNLOADED: screenshot @ 2021-08-05 19:23:08
#+ATTR_LaTeX: :width 0.6\linewidth
[[file:images/Org_Syntax_for_TeX/2021-08-05_19-23-08_screenshot.png]]

* Org and Packages
- Effectively generates ~.cls~ and ~.sty~ files
#+DOWNLOADED: screenshot @ 2021-08-05 19:37:36
#+ATTR_LaTeX: :width 0.8\linewidth
[[file:images/Beamer_Theme/2021-08-05_19-37-36_screenshot.png]]

* Org and Headers
- In body ~TeX~ can be directly written in ~export~ blocks
  + ~#+LATEX_HEADER:~ can be used to add to document headers

#+DOWNLOADED: screenshot @ 2021-08-05 19:44:12
[[file:images/Org_and_Headers/2021-08-05_19-44-12_screenshot.png]]

* Generating Classes
- ~#+LATEX_CLASS: myclass~ is populated from ~org-latex-classes~
  + So we need to add to it before use
- Or use it as part of the ~single file setup~

\scriptsize
#+BEGIN_SRC emacs-lisp :tangle no :exports code :results none :eval never
(append-to-list
 'org-latex-classes
 '(("tufte-book"
    "\\documentclass[a4paper, sfsidenotes, openany, justified]{tufte-book}"
    ("\\part{%s}" . "\\part*{%s}")
    ("\\chapter{%s}" . "\\chapter*{%s}")
    ("\\section{%s}" . "\\section*{%s}")
    ("utf8" . "utf8x")
    ("\\subsection{%s}" . "\\subsection*{%s}"))))
#+END_SRC

* Replacing Jupyter
~#+PROPERTY: header-args:python :python /home/haozeke/.pyenv/shims/python :session OnePy :results output :exports both :tangle pyCode.py3~

** A block :B_ignoreheading:BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:
#+DOWNLOADED: screenshot @ 2021-08-05 20:03:43
[[file:images/Replacing_Jupyter/2021-08-05_20-03-43_screenshot.png]]
** A block :B_ignoreheading:BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:

#+DOWNLOADED: screenshot @ 2021-08-05 20:04:19
[[file:images/A_block/2021-08-05_20-04-19_screenshot.png]]

* PDF Output
- Much nicer (and more native) than Jupyter

#+DOWNLOADED: screenshot @ 2021-08-05 20:07:02
#+ATTR_LaTeX: :width 0.6\linewidth
[[file:images/Output/2021-08-05_20-07-02_screenshot.png]]
* Teaching CI Org-TeX
\scriptsize
#+begin_src emacs-lisp :results none :eval never
(require 'package)
(setq package-check-signature nil)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
(unless package-archive-contents   (package-refresh-contents))
(package-install 'use-package)
(package-install 'org)
(dolist (package '(use-package))
   (unless (package-installed-p package)
       (package-install package)))
(use-package org-ref
   :ensure t)
(require 'ox-latex)
;; Define an interactive function for easy testing
(defun org-beamer-export-to-pdf-directory (files)
  "Export all FILES to latex."
  (interactive "Export org files to tex")
;; Export all org files given on the command line
(org-beamer-export-to-pdf-directory argv)
#+end_src

* GH Actions and Org-TeX
- More completely, see [[https://github.com/HaoZeke/ipam21_tqc_wg_report/blob/main/scripts/org2tex.el][this script]]
  + With [[https://github.com/HaoZeke/ipam21_tqc_wg_report/actions][this action]]
\scriptsize
#+begin_src yaml
- name: Generate TeX
  run: emacs -q -nl --script scripts/org2tex.el src/filename.org
- name: Build pdf
  run: |
#+end_src
#+begin_src bash
export PATH=/tmp/texlive/bin/x86_64-linux:$PATH
export PATH=$HOME/texmf/bin:$PATH
cd src/
texliveonfly -c latexmk -a "-pdfxe -shell-escape -f" wgtqc.tex
#+end_src
* Omitted Topics
- Caching :: CI rebuilds can be sped up with caching mechanisms
- Emacs-Lisp :: Too much and too irrelevant for ~TeX~ in general
- Advanced Concepts :: CI configurations and custom ~emacs~ setups; a lot more [[https://dotdoom.rgoswami.me][detail here]]
- Jupyter and Org :: Orgmode can be used as a fully fledged multi-language plain text Jupyter replacement for data science
* Advanced Concepts
- Going beyond single files with ~:noweb yes~
  + Uses named blocks for clarity ~#+NAME: orgConf~
    - Named blocks are not tangled

\scriptsize
#+BEGIN_SRC emacs-lisp :noweb no :exports code :eval never
(eval-after-load 'ox '(require 'ox-koma-letter))
(with-eval-after-load 'ox-latex
 <<tex_process>>
 <<common_pkgs>>
 <<tufte_book>>
 <<koma_art>>
)
#+END_SRC
* Conclusions
- ~orgmode~ provides a viable alternative syntax for writing ~TeX~
  + Can be used on public clouds without knowing ~emacs~
- ~TeX~ is *here to stay*
- Abstracting complexity away from users is good
  + Public cloud usage spares installation issues
    - Enables ~git~ workflows
- Alternative syntaxes provide more natural usage for novices
  + ~orgmode~ facilitates native execution
* End
:PROPERTIES:
:BEAMER_opt: standout
:END:
#+BEGIN_EXPORT latex
\begin{center}
  \Huge Thank you
\end{center}
#+END_EXPORT

# * References
# :PROPERTIES:
# :BEAMER_opt: allowframebreaks
# :END:

# \printbibliography
