
@article{akinObjectOrientedProgramming1999,
  title = {Object {{Oriented Programming}} via {{Fortran}} 90},
  author = {Akin, J E},
  date = {1999},
  journaltitle = {Object Oriented Programming via Fortran},
  pages = {23},
  abstract = {There is a widely available object-oriented (OO) programming language that is usually overlooked in the OO Analysis, OO Design, OO Programming literature. It was designed with most of the features of languages like C++, Eiffel, and Smalltalk. It has extensive and efficient numerical abilities including concise array and matrix handling, like MatlabÂ®. In addition, it is readily extended to massively parallel machines and is backed by an international ISO and ANSI standard. The language is Fortran 90 (and Fortran 95).},
  langid = {english},
  file = {/home/rgoswami/Zotero/storage/R95Q5PHZ/Akin - 1999 - Object Oriented Programming via Fortran 90.pdf}
}

@article{baderFortranBindingGNU2007,
  title = {A {{Fortran}} Binding for the {{GNU}} Scientific Library},
  author = {Bader, Reinhold},
  date = {2007-08-01},
  journaltitle = {ACM SIGPLAN Fortran Forum},
  shortjournal = {SIGPLAN Fortran Forum},
  volume = {26},
  number = {2},
  pages = {4--11},
  issn = {1061-7264},
  doi = {10.1145/1279941.1279942},
  url = {https://doi.org/10.1145/1279941.1279942},
  urldate = {2021-10-01},
  abstract = {The GNU scientific library is a collection of numerical routines for scientific computing. This article discusses some aspects of the design of a fully standard-conforming Fortran binding for GSL via incremental usage of Fortran 2003 features, in particular C interoperation. Suggestions are made on how to deal with function dummy arguments and polymorphic C objects of type void*.},
  file = {/home/rgoswami/Zotero/storage/F6U2Z6XF/Bader_2007_A Fortran binding for the GNU scientific library.pdf}
}

@article{decykHowSupportInheritance1998,
  title = {How to Support Inheritance and Run-Time Polymorphism in {{Fortran}} 90},
  author = {Decyk, Viktor K. and Norton, Charles D. and Szymanski, Boleslaw K.},
  date = {1998-12},
  journaltitle = {Computer Physics Communications},
  shortjournal = {Computer Physics Communications},
  volume = {115},
  number = {1},
  pages = {9--17},
  issn = {00104655},
  doi = {10.1016/S0010-4655(98)00101-5},
  url = {https://linkinghub.elsevier.com/retrieve/pii/S0010465598001015},
  urldate = {2021-09-24},
  abstract = {Fortran 90 does not support automatic inheritance and run-time polymorphism as language mechanisms. This paper discusses techniques for software emulation of inheritance and polymorphism in Fortran 90, which simplifies the implementation of an object-oriented programming style in Fortran 90.},
  langid = {english},
  file = {/home/rgoswami/Zotero/storage/GZ9TNWBA/Decyk et al. - 1998 - How to support inheritance and run-time polymorphi.pdf}
}

@article{decykMethodPassingData2008,
  title = {A Method for Passing Data between {{C}} and {{Opaque Fortran}} 90 Pointers},
  author = {Decyk, Viktor K.},
  date = {2008-08},
  journaltitle = {ACM SIGPLAN Fortran Forum},
  shortjournal = {SIGPLAN Fortran Forum},
  volume = {27},
  number = {2},
  pages = {2--7},
  issn = {1061-7264, 1931-1311},
  doi = {10.1145/1408643.1408644},
  url = {https://dl.acm.org/doi/10.1145/1408643.1408644},
  urldate = {2021-10-01},
  abstract = {This paper discusses a portable, standard conforming method for passing data arrays between C and Fortran 90.},
  langid = {english},
  file = {/home/rgoswami/Zotero/storage/VZXHX9RA/Decyk - 2008 - A method for passing data between C and Opaque For.pdf}
}

@article{epperlyHighperformanceLanguageInteroperability2012,
  title = {High-Performance Language Interoperability for Scientific Computing through {{Babel}}},
  author = {Epperly, Thomas GW and Kumfert, Gary and Dahlgren, Tamara and Ebner, Dietmar and Leek, Jim and Prantl, Adrian and Kohn, Scott},
  date = {2012-08-01},
  journaltitle = {The International Journal of High Performance Computing Applications},
  shortjournal = {The International Journal of High Performance Computing Applications},
  volume = {26},
  number = {3},
  pages = {260--274},
  publisher = {{SAGE Publications Ltd STM}},
  issn = {1094-3420},
  doi = {10.1177/1094342011414036},
  url = {https://doi.org/10.1177/1094342011414036},
  urldate = {2021-10-01},
  abstract = {High-performance scientific applications are usually built from software modules written in multiple programming languages. This raises the issue of language interoperability which involves making calls between languages, converting basic types, and bridging disparate programming models. Babel provides a feature-rich, extensible, high-performance solution to the language interoperability problem currently supporting C, C++, FORTRAN 77, Fortran 90/95, Fortran 2003/2008, Python, and Java. Babel supports object-oriented programming features and interface semantics with runtime enforcement. In addition to in-process language interoperability, Babel includes remote method invocation to support hybrid parallel and distributed computing paradigms.},
  langid = {english},
  keywords = {Babel,distributed computing,high-performance computing,language interoperability,object-oriented,remote method invocation,scientific computing},
  file = {/home/rgoswami/Zotero/storage/9H29PX2X/Epperly et al_2012_High-performance language interoperability for scientific computing through.pdf}
}

@article{grayShadowobjectInterfaceFortran1999,
  title = {Shadow-Object Interface between {{Fortran}} 95 and {{C}}++},
  author = {Gray, M.G. and Roberts, R.M. and Evans, T.M.},
  date = {1999-03},
  journaltitle = {Computing in Science Engineering},
  volume = {1},
  number = {2},
  pages = {63--70},
  issn = {1558-366X},
  doi = {10.1109/5992.753048},
  abstract = {The authors aim to automatically interface C++ and Fortran 95 code, with either language playing the role of main and with user-defined types from one language available in the other. To physically interface C++ and Fortran 95 they: ensure that procedure names are visible and sensible across the language interface; reduce procedure arguments to the common set of built-in types available in both languages; and ensure that the proper code initialization takes place in both languages.},
  eventtitle = {Computing in {{Science Engineering}}},
  keywords = {Code standards,Computer interfaces,Data engineering,Laboratories,Libraries,Linux,Magnetic confinement,Microelectronics,Physics computing,Sun},
  file = {/home/rgoswami/Zotero/storage/VB5534F3/Gray et al_1999_Shadow-object interface between Fortran 95 and C++.pdf}
}

@book{jonesUnderstandingProgrammingLanguages2020,
  title = {Understanding {{Programming Languages}}},
  author = {Jones, Cliff B.},
  date = {2020},
  publisher = {{Springer International Publishing}},
  location = {{Cham}},
  doi = {10.1007/978-3-030-59257-8},
  url = {http://link.springer.com/10.1007/978-3-030-59257-8},
  urldate = {2021-10-01},
  isbn = {978-3-030-59256-1 978-3-030-59257-8},
  langid = {english},
  file = {/home/rgoswami/Zotero/storage/DWRX8DDZ/Jones - 2020 - Understanding Programming Languages.pdf}
}

@article{kahanIEEEStandard7541997,
  title = {{{IEEE Standard}} 754 for {{Binary Floating-Point Arithmetic}}},
  author = {Kahan, W},
  date = {1997},
  pages = {30},
  langid = {english},
  file = {/home/rgoswami/Zotero/storage/P2JGFMAS/Kahan - 1997 - IEEE Standard 754 for Binary Floating-Point Arithm.pdf}
}

@inproceedings{kellWereMeantEndurance2017,
  title = {Some Were Meant for {{C}}: The Endurance of an Unmanageable Language},
  shorttitle = {Some Were Meant for {{C}}},
  booktitle = {Proceedings of the 2017 {{ACM SIGPLAN International Symposium}} on {{New Ideas}}, {{New Paradigms}}, and {{Reflections}} on {{Programming}} and {{Software}}},
  author = {Kell, Stephen},
  date = {2017-10-25},
  series = {Onward! 2017},
  pages = {229--245},
  publisher = {{Association for Computing Machinery}},
  location = {{New York, NY, USA}},
  doi = {10.1145/3133850.3133867},
  url = {https://doi.org/10.1145/3133850.3133867},
  urldate = {2021-10-01},
  abstract = {The C language leads a double life: as an application programming language of yesteryear, perpetuated by circumstance; and as a systems programming language which remains a weapon of choice decades after its creation. This essay is a C programmer's reaction to the call to abandon ship. It questions several aspects commonly held to define the experience of using C; these include unsafety, undefined behaviour, and the motivation of performance. It argues all these are in fact inessential; rather, it traces C's ultimate strength to a communicative design which cannot be understood within the usual conception of "a programming language", but can be seen as the antithesis of so-called "managed" languages. This communicativity is understood as facilitating the essential aspect of system-building: creating parts which interact with other remote parts---being "alongside" not "within", and of "alien" origin.},
  isbn = {978-1-4503-5530-8},
  keywords = {managed languages,safety,systems programming,undefined behavior,virtual machine},
  file = {/home/rgoswami/Zotero/storage/E6DLNZHL/Kell_2017_Some were meant for C.pdf}
}

@article{kermodeF90wrapAutomatedTool2020,
  title = {F90wrap: An Automated Tool for Constructing Deep {{Python}} Interfaces to Modern {{Fortran}} Codes},
  shorttitle = {F90wrap},
  author = {Kermode, James R.},
  date = {2020-05},
  journaltitle = {Journal of Physics: Condensed Matter},
  shortjournal = {J. Phys.: Condens. Matter},
  volume = {32},
  number = {30},
  pages = {305901},
  publisher = {{IOP Publishing}},
  issn = {0953-8984},
  doi = {10.1088/1361-648X/ab82d2},
  url = {https://doi.org/10.1088/1361-648x/ab82d2},
  urldate = {2021-10-01},
  abstract = {f90wrap is a tool to automatically generate Python extension modules which interface to Fortran libraries that makes use of derived types. It builds on the capabilities of the popular f2py utility by generating a simpler Fortran 90 interface to the original Fortran code which is then suitable for wrapping with f2py, together with a higher-level Pythonic wrapper that makes the existance of an additional layer transparent to the final user. f90wrap has been used to wrap a number of large software packages of relevance to the condensed matter physics community, including the QUIP molecular dynamics code and the CASTEP density functional theory code.},
  langid = {english},
  file = {/home/rgoswami/Zotero/storage/IC33EX99/Kermode_2020_f90wrap.pdf}
}

@article{maleyFormalSpecificationAbstract1996,
  title = {The Formal Specification of Abstract Data Types and Their Implementation in {{Fortran}} 90: Implementation Issues Concerning the Use of Pointers},
  shorttitle = {The Formal Specification of Abstract Data Types and Their Implementation in {{Fortran}} 90},
  author = {Maley, D. and Kilpatrick, P. L. and Schreiner, E. W. and Scott, N. S. and Diercksen, G. H. F.},
  date = {1996-10-01},
  journaltitle = {Computer Physics Communications},
  shortjournal = {Computer Physics Communications},
  volume = {98},
  number = {1},
  pages = {167--180},
  issn = {0010-4655},
  doi = {10.1016/0010-4655(96)00093-8},
  url = {https://www.sciencedirect.com/science/article/pii/0010465596000938},
  urldate = {2021-10-01},
  abstract = {In this paper we continue our investigation into the development of computational-science software based on the identification and formal specification of Abstract Data Types (ADTs) and their implementation in Fortran 90. In particular, we consider the consequences of using pointers when implementing a formally specified ADT in Fortran 90. Our aim is to highlight the resulting conflict between the goal of information hiding, which is central to the ADT methodology, and the space efficiency of the implementation. We show that the issue of storage recovery cannot be avoided by the ADT user, and present a range of implementations of a simple ADT to illustrate various approaches towards satisfactory storage management. Finally, we propose a set of guidelines for implementing ADTs using pointers in Fortran 90. These guidelines offer a way gracefully to provide disposal operations in Fortran 90. Such an approach is desirable since Fortran 90 does not provide automatic garbage collection which is offered by many object-oriented languages including Eiffel, Java, Smalltalk, and Simula.},
  langid = {english},
  file = {/home/rgoswami/Zotero/storage/54X7MSIZ/Maley et al_1996_The formal specification of abstract data types and their implementation in.pdf;/home/rgoswami/Zotero/storage/CZULW98K/0010465596000938.html}
}

@article{petersonF2PYToolConnecting2009,
  title = {{{F2PY}}: A Tool for Connecting {{Fortran}} and {{Python}} Programs},
  shorttitle = {{{F2PY}}},
  author = {Peterson, Pearu},
  date = {2009},
  journaltitle = {International Journal of Computational Science and Engineering},
  shortjournal = {IJCSE},
  volume = {4},
  number = {4},
  pages = {296},
  issn = {1742-7185, 1742-7193},
  doi = {10.1504/IJCSE.2009.029165},
  url = {http://www.inderscience.com/link.php?id=29165},
  urldate = {2021-08-30},
  langid = {english},
  file = {/home/rgoswami/Zotero/storage/2I2RNIGP/Peterson_2009_F2PY.pdf}
}

@article{pletzerExposingFortranDerived2008,
  title = {Exposing {{Fortran Derived Types}} to {{C}} and {{Other Languages}}},
  author = {Pletzer, Alexander and McCune, Douglas and Muszala, Stefan and Vadlamani, Srinath and Kruger, Scott},
  date = {2008-07},
  journaltitle = {Computing in Science Engineering},
  volume = {10},
  number = {4},
  pages = {86--92},
  issn = {1558-366X},
  doi = {10.1109/MCSE.2008.94},
  abstract = {When building large scientific codes, you might have to mix different programming languages. The authors show how to bridge the interoperability gap between Fortran 90/95 and C, and from C to other languages, with working code examples.},
  eventtitle = {Computing in {{Science Engineering}}},
  keywords = {Bridges,Computer languages,Data encapsulation,derived types,Fortran,Java,Joining processes,Object oriented modeling,Object oriented programming,Parallel architectures,Parallel programming,programming languages,Programming profession,Python,scientific programming},
  file = {/home/rgoswami/Zotero/storage/4VXSGXCM/Pletzer et al_2008_Exposing Fortran Derived Types to C and Other Languages.pdf;/home/rgoswami/Zotero/storage/B98MNURG/4548209.html}
}

@article{rasmussenBridgingLanguageGap2006,
  title = {Bridging the Language Gap in Scientific Computing: The {{Chasm}} Approach},
  shorttitle = {Bridging the Language Gap in Scientific Computing},
  author = {Rasmussen, C. E. and Sottile, M. J. and Shende, S. S. and Malony, A. D.},
  date = {2006-02},
  journaltitle = {Concurrency and Computation: Practice and Experience},
  shortjournal = {Concurrency Computat.: Pract. Exper.},
  volume = {18},
  number = {2},
  pages = {151--162},
  issn = {1532-0626, 1532-0634},
  doi = {10.1002/cpe.909},
  url = {https://onlinelibrary.wiley.com/doi/10.1002/cpe.909},
  urldate = {2021-09-27},
  abstract = {Chasm is a toolkit providing seamless language interoperability between Fortran 95 and C++. Language interoperability is important to scientific programmers because scientific applications are predominantly written in Fortran, while software tools are mostly written in C++. Two design features differentiate Chasm from other related tools. First, we avoid the common-denominator type systems and programming models found in most Interface Definition Language (IDL)-based interoperability systems. Chasm uses the intermediate representation generated by a compiler front-end for each supported language as its source of interface information instead of an IDL. Second, bridging code is generated for each pairwise language binding, removing the need for a common intermediate data representation and multiple levels of indirection between the caller and callee. These features make Chasm a simple system that performs well, requires minimal user intervention and, in most instances, bridging code generation can be performed automatically. Chasm is also easily extensible and highly portable. Copyright c 2005 John Wiley \& Sons, Ltd.},
  langid = {english},
  file = {/home/rgoswami/Zotero/storage/6KARV5YV/Rasmussen et al. - 2006 - Bridging the language gap in scientific computing.pdf}
}

@article{reidNewFeaturesFortran2003,
  title = {The {{New Features}} of {{Fortran}} 2003},
  author = {Reid, John},
  date = {2003},
  pages = {38},
  url = {https://wg5-fortran.org/N1551-N1600/N1579.pdf},
  langid = {english},
  file = {/home/rgoswami/Zotero/storage/X4B94AVQ/Reid - The New Features of Fortran 2003.pdf}
}

@report{StandardISOIEC2011,
  type = {Programming languages -- C},
  title = {C {{Standard ISO}}/{{IEC}} 9899:201x},
  date = {2011},
  url = {http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf},
  urldate = {2021-10-04},
  file = {/home/rgoswami/Zotero/storage/S3UZGX5G/n1570.pdf}
}


