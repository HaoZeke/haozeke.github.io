<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Snippets on Rohit Goswami</title><link>https://rgoswami.me/snippets/</link><description>Recent content in Snippets on Rohit Goswami</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0&lt;/a>.</copyright><lastBuildDate>Wed, 24 Nov 2021 16:20:00 +0000</lastBuildDate><atom:link href="https://rgoswami.me/snippets/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker Development Envs</title><link>https://rgoswami.me/snippets/docker-dev-envs/</link><pubDate>Wed, 24 Nov 2021 16:20:00 +0000</pubDate><guid>https://rgoswami.me/snippets/docker-dev-envs/</guid><description>Very quick set of ugly commands to grab build environments. A much better approach is to make a custom Dockerfile or even better, use nix.
However it does work in a pinch.
docker pull IMG:TAG sudo docker run -v LOCALDIR:DIRINDOCKER -it debian:experimental-20211115 bash # Don&amp;#39;t be root for long apt update apt install sudo vim zsh # Use the same username --&amp;gt; easier to manage permissions useradd -m -s /bin/zsh $USER -G sudo passwd $USER # Some crap # Or just add to the sudoers file echo &amp;#34;$USERALL=(ALL:ALL) ALL&amp;#34; &amp;gt;&amp;gt; /etc/sudoers su $USER # numpy stuff sudo apt install gcc gfortran libopenblas-dev python3.</description></item><item><title>SSH Port Forwarding</title><link>https://rgoswami.me/snippets/ssh-port-forwarding/</link><pubDate>Wed, 24 Nov 2021 16:20:00 +0000</pubDate><guid>https://rgoswami.me/snippets/ssh-port-forwarding/</guid><description>Whenever I need to access a server running on an HPC which does not support ngrok or localtunnel or even gsocket; the fallback approach is always to rely on SSH port forwarding.
The sample problem here is running an HTTP server for viewing graphics in R via httpgd.
# Local export PORT=9899 &amp;amp;&amp;amp; ssh -L &amp;#34;${PORT}:localhost:${PORT}&amp;#34; &amp;#34;rog32@krafla.rhi.hi.is&amp;#34; -N -L &amp;#34;${PORT}:localhost:${PORT}&amp;#34; elja # New tab ssh krafla ssh elja radian # or R Now in R.</description></item><item><title>Programming Language Management</title><link>https://rgoswami.me/snippets/prog-lang-man/</link><pubDate>Sun, 19 Sep 2021 17:39:00 +0000</pubDate><guid>https://rgoswami.me/snippets/prog-lang-man/</guid><description>nix aside1, I recently shifted to using asdf to manage different language versions.
git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.8.1 The main reason to prefer asdf over competing language specific options like rvm or pyenv or nvm and company is simply uniformity of the interface. This can be coupled with zinit snippet OMZ::plugins/asdf for loading the completions. Note that the installation steps can take a while especially if openssl is being installed.</description></item><item><title>Watching Files</title><link>https://rgoswami.me/snippets/watch-files/</link><pubDate>Sun, 19 Sep 2021 17:39:00 +0000</pubDate><guid>https://rgoswami.me/snippets/watch-files/</guid><description>My personal favorite for watching files and running context sensitive commands is to use the lovely filewatcher CLI utility written in Ruby.
gem install filewatcher gem install filewatcher-cli This can then be used with:
filewatcher &amp;#39;**/*.js&amp;#39; &amp;#39;node $FILENAME&amp;#39; However this hasn&amp;rsquo;t been updated in a while now and fails on newer versions of Ruby. So now I use watchexec.
cargo install watchexec-cli watchexec -w source/f2py &amp;#39;make html&amp;#39;</description></item><item><title>Forwarding Multiple Local Ports</title><link>https://rgoswami.me/snippets/forward-multiport/</link><pubDate>Sun, 16 May 2021 03:47:00 +0000</pubDate><guid>https://rgoswami.me/snippets/forward-multiport/</guid><description>Most often it makes more sense to map the same ports on every intermediate machine.
Host super Hostname super.machine.location.is IdentityFile ~/.ssh/mykey User myuser LocalForward 8001 localhost:8001 LocalForward 8002 localhost:8002 LocalForward 8003 localhost:8003 LocalForward 8004 localhost:8004 This is good for interactive sessions with multiple servers. For single servers, reverse proxy tunnels are more efficient.</description></item><item><title>Overwriting Attributes</title><link>https://rgoswami.me/snippets/nix-collection-overwrite-attrs/</link><pubDate>Sun, 16 May 2021 03:47:00 +0000</pubDate><guid>https://rgoswami.me/snippets/nix-collection-overwrite-attrs/</guid><description>doxygen191 = pkgs.doxygen.overrideAttrs (_: rec { name = &amp;#34;doxygen-1.9.1&amp;#34;; src = pkgs.fetchurl { urls = [ &amp;#34;mirror://sourceforge/doxygen/${name}.src.tar.gz&amp;#34; # faster, with https, etc. &amp;#34;http://doxygen.nl/files/${name}.src.tar.gz&amp;#34; ]; sha256 = &amp;#34;1lcif1qi20gf04qyjrx7x367669g17vz2ilgi4cmamp1whdsxbk7&amp;#34;; }; });</description></item></channel></rss>