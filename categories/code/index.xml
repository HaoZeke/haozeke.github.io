<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>code on Rohit Goswami</title><link>https://rgoswami.me/categories/code/</link><description>Recent content in code on Rohit Goswami</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0&lt;/a>.</copyright><lastBuildDate>Sun, 19 Sep 2021 17:39:00 +0000</lastBuildDate><atom:link href="https://rgoswami.me/categories/code/index.xml" rel="self" type="application/rss+xml"/><item><title>Programming Language Management</title><link>https://rgoswami.me/snippets/prog-lang-man/</link><pubDate>Sun, 19 Sep 2021 17:39:00 +0000</pubDate><guid>https://rgoswami.me/snippets/prog-lang-man/</guid><description>nix aside1, I recently shifted to using asdf to manage different language versions.
git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.8.1 The main reason to prefer asdf over competing language specific options like rvm or pyenv or nvm and company is simply uniformity of the interface. This can be coupled with zinit snippet OMZ::plugins/asdf for loading the completions. Note that the installation steps can take a while especially if openssl is being installed.</description></item><item><title>Watching Files</title><link>https://rgoswami.me/snippets/watch-files/</link><pubDate>Sun, 19 Sep 2021 17:39:00 +0000</pubDate><guid>https://rgoswami.me/snippets/watch-files/</guid><description>My personal favorite for watching files and running context sensitive commands is to use the lovely filewatcher CLI utility written in Ruby.
gem install filewatcher gem install filewatcher-cli This can then be used with:
filewatcher &amp;#39;**/*.js&amp;#39; &amp;#39;node $FILENAME&amp;#39; However this hasn&amp;rsquo;t been updated in a while now and fails on newer versions of Ruby. So now I use watchexec.
cargo install watchexec-cli watchexec -w source/f2py &amp;#39;make html&amp;#39;</description></item><item><title>Forwarding Multiple Local Ports</title><link>https://rgoswami.me/snippets/forward-multiport/</link><pubDate>Sun, 16 May 2021 03:47:00 +0000</pubDate><guid>https://rgoswami.me/snippets/forward-multiport/</guid><description>Most often it makes more sense to map the same ports on every intermediate machine.
Host super Hostname super.machine.location.is IdentityFile ~/.ssh/mykey User myuser LocalForward 8001 localhost:8001 LocalForward 8002 localhost:8002 LocalForward 8003 localhost:8003 LocalForward 8004 localhost:8004 This is good for interactive sessions with multiple servers. For single servers, reverse proxy tunnels are more efficient.</description></item><item><title>Overwriting Attributes</title><link>https://rgoswami.me/snippets/nix-collection-overwrite-attrs/</link><pubDate>Sun, 16 May 2021 03:47:00 +0000</pubDate><guid>https://rgoswami.me/snippets/nix-collection-overwrite-attrs/</guid><description>doxygen191 = pkgs.doxygen.overrideAttrs (_: rec { name = &amp;#34;doxygen-1.9.1&amp;#34;; src = pkgs.fetchurl { urls = [ &amp;#34;mirror://sourceforge/doxygen/${name}.src.tar.gz&amp;#34; # faster, with https, etc. &amp;#34;http://doxygen.nl/files/${name}.src.tar.gz&amp;#34; ]; sha256 = &amp;#34;1lcif1qi20gf04qyjrx7x367669g17vz2ilgi4cmamp1whdsxbk7&amp;#34;; }; });</description></item></channel></rss>