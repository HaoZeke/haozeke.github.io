<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>numpy on Rohit Goswami</title><link>/tags/numpy/</link><description>Recent content in numpy on Rohit Goswami</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0&lt;/a>.</copyright><lastBuildDate>Mon, 09 May 2022 03:39:00 +0000</lastBuildDate><atom:link href="/tags/numpy/index.xml" rel="self" type="application/rss+xml"/><item><title>Fortran OOP and Python</title><link>/posts/fortran-oop-python/</link><pubDate>Mon, 09 May 2022 03:39:00 +0000</pubDate><guid>/posts/fortran-oop-python/</guid><description>Explorations of object oriented Fortran with bind(c) derived types for representations generated by F2PY
Background Derived types are easily one of the most visible of the modern Fortran (post-F90) features and are central to object oriented programming paradigms in Fortarn.
For those new to the language, a rough guide to some terminology:
Fortran Closest C/C++ equivalent derived type struct extends type inherited class final destructor not standard conforming undefined behaviour Only the first of these are actually covered in terms of interoperability with C as of the F2018 draft standard.</description></item><item><title>Simple Fortran Derived Types and Python</title><link>/posts/cython-derivedtype-f2py/</link><pubDate>Sat, 02 Oct 2021 04:19:00 +0000</pubDate><guid>/posts/cython-derivedtype-f2py/</guid><description>Moving simple Fortran derived types to Python and back via C
Background Object oriented programming has been part of Fortran for longer than I have been aliveÂ 1. Fortran has derived types now. They&amp;rsquo;ve been around for around for over three decades. The standards at the same time, have been supporting more and more interoperable operations. Details of these pleasant historical improvements are pretty much the most the Fortran standards committee have managed to date in the 21st century.</description></item><item><title>NumPy, Meson and f2py</title><link>/posts/numpy-meson-f2py/</link><pubDate>Thu, 23 Sep 2021 05:45:00 +0000</pubDate><guid>/posts/numpy-meson-f2py/</guid><description>Exploring meson for interfacing fortran and python via f2py and standard techniques, with benchmarks.
Background A recent post gauging community interest in f2py brought to light (among other aspects) the fact that the build systems of f2py are rather opaque to the end user. There are good reasons for this, since many of the tools discussed in this post were not around / in any shape to be used during the active development of f2py1.</description></item></channel></rss>