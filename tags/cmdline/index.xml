<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cmdline on Rohit Goswami</title><link>https://rgoswami.me/tags/cmdline/</link><description>Recent content in cmdline on Rohit Goswami</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0&lt;/a>.</copyright><lastBuildDate>Mon, 17 Jan 2022 02:28:00 +0000</lastBuildDate><atom:link href="https://rgoswami.me/tags/cmdline/index.xml" rel="self" type="application/rss+xml"/><item><title>Mach-Nix and Shell Environments</title><link>https://rgoswami.me/snippets/mach-nix-shell-env/</link><pubDate>Mon, 17 Jan 2022 02:28:00 +0000</pubDate><guid>https://rgoswami.me/snippets/mach-nix-shell-env/</guid><description>I often need to set up quick virtual environments. Unfortunately, the standard approach to work with this in nix deals with the local nixpkgs mechanism for python dependencies:
1nix-shell -p &amp;#34;python38.withPackages(ps: [ ps.numpy ps.sh ])&amp;#34; However there is a catch for packages which are not officially present upstream.
1# Fails! 2nix-shell -p &amp;#34;python38.withPackages(ps: [ ps.numpy ps.sh ps.lieer ])&amp;#34; However, the mach-nix project can indeed be used to work around this, at the cost of a somewhat longer command.</description></item><item><title>Docker Development Environments</title><link>https://rgoswami.me/snippets/docker-dev-envs/</link><pubDate>Wed, 24 Nov 2021 16:20:00 +0000</pubDate><guid>https://rgoswami.me/snippets/docker-dev-envs/</guid><description>Very quick set of ugly commands to grab build environments. A much better approach is to make a custom Dockerfile or even better, use nix.
However it does work in a pinch.
1docker pull IMG:TAG 2sudo docker run -v LOCALDIR:DIRINDOCKER -it debian:experimental-20211115 bash 3# Don&amp;#39;t be root for long 4apt update 5apt install sudo vim zsh 6# Use the same username --&amp;gt; easier to manage permissions 7useradd -m -s /bin/zsh $USER -G sudo 8passwd $USER # Some crap 9# Or just add to the sudoers file 10echo &amp;#34;$USERALL=(ALL:ALL) ALL&amp;#34; &amp;gt;&amp;gt; /etc/sudoers 11su $USER 12# numpy stuff 13sudo apt install gcc gfortran libopenblas-dev python3.</description></item><item><title>Watching Files</title><link>https://rgoswami.me/snippets/watch-files/</link><pubDate>Sun, 19 Sep 2021 17:39:00 +0000</pubDate><guid>https://rgoswami.me/snippets/watch-files/</guid><description>My personal favorite for watching files and running context sensitive commands is to use the lovely filewatcher CLI utility written in Ruby.
1gem install filewatcher 2gem install filewatcher-cli This can then be used with:
1filewatcher &amp;#39;**/*.js&amp;#39; &amp;#39;node $FILENAME&amp;#39; However this hasn&amp;rsquo;t been updated in a while now and fails on newer versions of Ruby. So now I use watchexec.
1cargo install watchexec-cli 2watchexec -w source/f2py &amp;#39;make html&amp;#39;</description></item></channel></rss>