<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>pytorch on Rohit Goswami</title><link>/tags/pytorch/</link><description>Recent content in pytorch on Rohit Goswami</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0&lt;/a>.</copyright><lastBuildDate>Sun, 24 Apr 2022 19:16:00 +0000</lastBuildDate><atom:link href="/tags/pytorch/index.xml" rel="self" type="application/rss+xml"/><item><title>Spack and PyTorch Development Workflows</title><link>/posts/spack-pytorch-dev-workflow/</link><pubDate>Sun, 24 Apr 2022 19:16:00 +0000</pubDate><guid>/posts/spack-pytorch-dev-workflow/</guid><description>pytorch local development environments without tears, root access or spack dev-build
Background Build systems are a bit of a nightmare. I spend most of my time SSH&amp;rsquo;ed into more powerful CPU machines, and sometimes on machines with more exotic compute devices. micromamba is typically my poison of choice where nix is not an option.
However, micromamba doesn&amp;rsquo;t allow a whole lot in the way of setting up environments which do not use packages already on conda-forge.</description></item></channel></rss>