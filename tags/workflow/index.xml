<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>workflow on Rohit Goswami</title><link>https://rgoswami.me/tags/workflow/</link><description>Recent content in workflow on Rohit Goswami</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0&lt;/a>.</copyright><lastBuildDate>Sat, 19 Aug 2023 13:33:00 +0000</lastBuildDate><atom:link href="https://rgoswami.me/tags/workflow/index.xml" rel="self" type="application/rss+xml"/><item><title>Managing cloud based calibre libraries</title><link>https://rgoswami.me/posts/managing-cloud-based-calibre/</link><pubDate>Sat, 19 Aug 2023 13:33:00 +0000</pubDate><guid>https://rgoswami.me/posts/managing-cloud-based-calibre/</guid><description>Ruminations on cross-cloud library management
Background I have a set of different devices across which I need to sync my library (described in an earlier post). Ideally this should be a lazy synchronization mechanism and be as general as possible.
Constraints calibre should never be modifying the files while they are being synced, not only because it creates and removes a lot of temporary files and folders which will cause churn, but also because it actually locks files during modification and this leads to permission issues.</description></item><item><title>Managing Scanned Books</title><link>https://rgoswami.me/posts/managing-scanned-books/</link><pubDate>Mon, 26 Jun 2023 21:34:00 +0000</pubDate><guid>https://rgoswami.me/posts/managing-scanned-books/</guid><description>Where I consider digitizing colored content.
Background It so happened that I recently acquired a rather unique book which (somewhat oddly) had no corresponding digital variant 1. I&amp;rsquo;ve discussed how I modify books and papers for consumption on my Kobo Aura HD in the past, but this comes before that. Much of this is essentially a plug for Scantailor Advanced 2.
Goals Starting with the initial output pdf files from a scanner&amp;rsquo;s &amp;ldquo;scan to me&amp;rdquo; function 3 the goal is to have all the bells and whistles of a well-done digital book:</description></item><item><title>TinySSH for Docker Development Environments</title><link>https://rgoswami.me/posts/tinyssh-dockerdev-env/</link><pubDate>Sun, 26 Dec 2021 22:14:00 +0000</pubDate><guid>https://rgoswami.me/posts/tinyssh-dockerdev-env/</guid><description>Rootless SSH servers with TinySSH for local GitPod containers
Background act works well enough for most Github Actions workflows, until something fails in the pipeline, or interactive debugging is required. Naturally this is beyond the purview of act itself, but it is easy enough to set up shop with a project&amp;rsquo;s GitPod docker image being used. For the purposes of the post we&amp;rsquo;ll consider numpy.
1docker run -v $(pwd):/home/gitpod/f2py_skel --name f2py_npdev -it numpy/numpy-dev:latest docker attach can be used in tandem with docker stop and docker start, but these have the disadvantage of only providing one synchronous view of the machine.</description></item><item><title>Revisiting Wayland for ArchLinux</title><link>https://rgoswami.me/posts/revisiting-wayland-2021-archlinux/</link><pubDate>Fri, 24 Dec 2021 18:13:00 +0000</pubDate><guid>https://rgoswami.me/posts/revisiting-wayland-2021-archlinux/</guid><description>Ruminating on wayland and sway for daily use with ArchLinux
Background Many years ago, I found time to make an attempt to switch away from the X11 Window system to Wayland. At the time, I ended up switching back to Xorg, but I did want to revisit it. Since I returned from home recently and was gifted a Gen 6 ThinkPad X1 Carbon, I had a perfect opportunity to do so 1.</description></item><item><title>Remapping Keys for ColemakVIM on MacOS</title><link>https://rgoswami.me/posts/keybindings-colevimhz-macos/</link><pubDate>Fri, 23 Jul 2021 04:45:00 +0000</pubDate><guid>https://rgoswami.me/posts/keybindings-colevimhz-macos/</guid><description>Struggling to emulate klfc for VIM Colemak bindings on Darwin (macOS) systems with Hammerspoon and Karabiner
Background I have mentioned in the past my customized Colemak dotfiles which I used with a customized keyboard layout. Unfortunately, the .keylayout system of MacOS is far more primitive than the elegant klfc setup 1. For an understanding of what we are trying to get at, the following poorly made video will suffice.</description></item><item><title>Nix, Channels and the NUR</title><link>https://rgoswami.me/posts/nix-channel-nur/</link><pubDate>Wed, 21 Jul 2021 02:01:00 +0000</pubDate><guid>https://rgoswami.me/posts/nix-channel-nur/</guid><description>A short exploration of multi-user nix and interacting with the Nix User Repository without root
Background For multi-user nix installations 1, the NIX_PATH variable is empty. Here I briefly go over two approaches to mitigate this, one with nix-channel and the other by manual pinning. Note that this post will eventually be superseded for most cases by a better flake workflow.
Channels The idea behind using a channel is essentially that the tar at a particular commit / tag will be downloaded and stored, typically at $HOME/.</description></item><item><title>Doom Emacs and Language Servers</title><link>https://rgoswami.me/posts/emacs-lang-servers/</link><pubDate>Tue, 20 Jul 2021 02:28:00 +0000</pubDate><guid>https://rgoswami.me/posts/emacs-lang-servers/</guid><description>doom-emacs as an ssh IDE with TRAMP using eglot and language servers.
Background For most of my emacs configuration1, there normally isn&amp;rsquo;t very much to write about which isn&amp;rsquo;t immediately evident from my configuration site. However, since my shift to a MacBook, I have needed to fine tune my existing lsp-mode default setup for TRAMP and this post will cover a little bit of that. Though most of the post is about doom-emacs, it is also applicable to vanilla emacs after porting the snippets over to use-package instead.</description></item><item><title>Biblatex to Bibtex for Sphinx</title><link>https://rgoswami.me/posts/zotero-biblatex-bibtex/</link><pubDate>Sun, 23 May 2021 05:37:00 +0000</pubDate><guid>https://rgoswami.me/posts/zotero-biblatex-bibtex/</guid><description>Background Transitioning from biblatex to bibtex with biber for sphinx
I recently started a set of notes using jupyter-book. However, in the process I ran into a horrific bibliography related SNAFU. sphinx in its infinite wisdom only accepts a rather odd subset of bibtex.
I have been happily exporting my giant bibliography with Zotero (and better bibtex) exporting my references as biblatex while sphinx started choking dreadfully. This post describes attempts to reconcile the biblatex sources without manual intervention.</description></item><item><title>Fortran, GSoC21 and Me</title><link>https://rgoswami.me/posts/fortran-gsoc-me/</link><pubDate>Fri, 21 May 2021 05:17:00 +0000</pubDate><guid>https://rgoswami.me/posts/fortran-gsoc-me/</guid><description>Reminisces and prophecies brought upon by LFortran and GSoC 2021
Background I know not what the language of the future will look like, but I know it will be called FORTRAN&amp;hellip; &amp;lt;br&amp;gt; &amp;mdash; Charles Anthony Richard Hoare, circa 1982 &amp;lt;br&amp;gt; &amp;ndash; Daan Frenkel, 2020
This post is a little belated, given that the GSoC announcements were a few days ago. Therein lies the future, and much digital ink, sweat and blood shall be spilled towards accomplishing the goals outlined in my accepted project proposal.</description></item><item><title>HPC Configuration 2021</title><link>https://rgoswami.me/posts/hpc-conf-2021/</link><pubDate>Sun, 09 May 2021 23:12:00 +0000</pubDate><guid>https://rgoswami.me/posts/hpc-conf-2021/</guid><description>A post on configuring a user account for heavy interactive HPC usage with Spack, Nix and self-hosted applications.
Background I have in the past written a few posts about configuring my HPC setup. Since the Research and University Network of Iceland hf. (RHnet) recently recieved funding for a new machine, called Elja 1, I decided to jot down my notes from my setup as part of the user interaction team.</description></item><item><title>Dotfiles from dotgit to bombadil</title><link>https://rgoswami.me/posts/dotfiles-dotgit-bombadil/</link><pubDate>Sun, 02 May 2021 23:12:00 +0000</pubDate><guid>https://rgoswami.me/posts/dotfiles-dotgit-bombadil/</guid><description>Discussion on dotfile management, a meandering path to my current setup from dotgit to bombadil. EDIT: Superseded by my chezmoi configuration described here
Background No one gets very far working with stock one-size fits all tools in any discipline but it is especially true of working with computers. The right set of dotfiles have been compared to priming spells for invocation later, and this is probably true. More than anything else, dotfiles offer familiarity where there is none, be it from cowsay or a fancy shell prompt 1.</description></item><item><title>My Life in E-ink</title><link>https://rgoswami.me/posts/my-life-in-eink/</link><pubDate>Sat, 20 Feb 2021 01:41:00 +0000</pubDate><guid>https://rgoswami.me/posts/my-life-in-eink/</guid><description>Collection of odds and ends relating to e-readers including personal reminisces
Background Reading has been a huge part of my life. The written word has had arguably more of an impact on my life than anything I have experienced in person. As a kid back in early 2000&amp;rsquo;s; this meant a lot of library trips and saving for paperbacks. I also caught the first wave of the e-ink revolution. Nothing beats a real book, in terms of textures and scents; but e-ink devices and the fantastic tools outlined here should make reading digital books much more palpable 1.</description></item><item><title>Reclaiming Email with Astroid</title><link>https://rgoswami.me/posts/reclaim-email-astroid/</link><pubDate>Wed, 30 Dec 2020 06:37:00 +0000</pubDate><guid>https://rgoswami.me/posts/reclaim-email-astroid/</guid><description>Migrating Imap, Gmail and Exchange, mail accounts from GUI clients to Astroid
Background Initially, I had planned this post to start with a brief history of the decline of email clients for Linux. That quickly got out of hand, and was therefore spun out into a post of its own (TBD). To keep things brief. Thanks to the incredible ineptitude of the Thunderbird steering committee, I ended up requiring a new mail client.</description></item><item><title>Private Github Actions without PAT</title><link>https://rgoswami.me/posts/priv-gh-actions/</link><pubDate>Wed, 23 Dec 2020 14:34:00 +0000</pubDate><guid>https://rgoswami.me/posts/priv-gh-actions/</guid><description>A workflow for managing private submodules in a private repository without personal access tokens for Github actions
Background Ever since Travis CI decided to drink corporate kool-aid, the search for a new CI has been brought to the fore again. Github Actions seem uniquely suited for private repositories, since most CIs bill for private repos. However, the basic authentication setup for the checkout action involves using one SSH key, effectively a personal access token, for both the main project and all submodules.</description></item><item><title>Project Specific Expressions from Nixpkgs for Sphinx documentation</title><link>https://rgoswami.me/posts/nix-prj-spec-doc/</link><pubDate>Tue, 22 Dec 2020 05:09:00 +0000</pubDate><guid>https://rgoswami.me/posts/nix-prj-spec-doc/</guid><description>Short post on making minimal changes to derivations in nixpkgs at a project level using callPackage() along with GH-Actions for deployment of sphinx documentation.
Background As part of my work on the Symengine documentation1, I had originally thought of leveraging nix for reproducible builds for each of the language bindings with GH-Actions. There exists a derivation in the upstream package repository, but it was outdated (v6.0.0 instead of v6.0.1) 2.</description></item><item><title>Remapping Keys with XKB and KLFC</title><link>https://rgoswami.me/posts/remap-keys-xkb-klfc/</link><pubDate>Sat, 05 Dec 2020 22:05:00 +0000</pubDate><guid>https://rgoswami.me/posts/remap-keys-xkb-klfc/</guid><description>An introduction to hacking keyboard layouts with X keyboard extension (XKB) and klfc, focused on Colemak and vim bindings
Background In-spite of maximizing ergonomic bindings for most common software (e.g. Vimium, doom-emacs), every operation with the arrow keys still trouble me. Here I will lay out my experiments transitioning to a stable, uniquely defined setup with the X keyboard extension.
Keyboard Basics Some terms to keep in mind for this post are1:</description></item><item><title>Anki Decks with Orgmode</title><link>https://rgoswami.me/posts/anki-decks-orgmode/</link><pubDate>Tue, 27 Oct 2020 01:05:00 +0000</pubDate><guid>https://rgoswami.me/posts/anki-decks-orgmode/</guid><description>Setting up unicode math and orgmode for painless Anki deck building
Background A recent Hacker News post reminded me of Anki, and that brought back memories of my Anki orgmode setup. I thought I&amp;rsquo;d re-create and immortalize it.
The standard way of working with Anki, is with a pretty awkward GUI. There are changes to be made here, which make life a little easier, including the setup of custom cards, but the inherent concerns of the WYSIWYG editor are basically insurmountable.</description></item><item><title>Replacing Zoom with Open Broadcaster Software</title><link>https://rgoswami.me/posts/rep-zoom-obs/</link><pubDate>Sat, 03 Oct 2020 17:05:00 +0000</pubDate><guid>https://rgoswami.me/posts/rep-zoom-obs/</guid><description>A post on local recordings
Background Since the advent of the COVID-19 situation, there has been an increase in the demand for recorded materials. Standard approaches involve Zoom, which is not only proprietary, but also quite a bit of a privacy nightmare. The last straw was the random placement of my speaker bauble head.
Figure 1: Zoom webcam placement
At this point, given that I was to set up a pre-recorded video for PyCon India 2020, I decided to look into alternatives.</description></item><item><title>Publishing Doxygen and Sphinx with Nix and Rake</title><link>https://rgoswami.me/posts/pub-doc-cpp-dox-sph-nix/</link><pubDate>Tue, 22 Sep 2020 10:30:00 +0000</pubDate><guid>https://rgoswami.me/posts/pub-doc-cpp-dox-sph-nix/</guid><description>Automating documentation deployment with Travis, rake and nix
Background In the previous post we generated documentation using Doxygen with Exhale to handle Sphinx. Now we will clean up the earlier workflow with rake and ensure the environment is reproducible with nix while deploying to Travis CI.
Setup A quick reminder of the setup we generated in the last post:
1tree -d $prj/ -L 2 . ├── docs │ ├── Doxygen │ └── Sphinx ├── nix │ └── pkgs ├── projects │ └── symengine └── scripts 8 directories We had further setup files to enable documentation generation with a manual two stage process (handling doxygen and sphinx separately).</description></item><item><title>Documenting C++ with Doxygen and Sphinx - Exhale</title><link>https://rgoswami.me/posts/doc-cpp-dox-sph-exhale/</link><pubDate>Tue, 22 Sep 2020 06:58:00 +0000</pubDate><guid>https://rgoswami.me/posts/doc-cpp-dox-sph-exhale/</guid><description>This post outlines a basic workflow for C++ projects using Doxygen, Sphinx, and Exhale.
Background My project proposal for documenting Symengine was recently accepted for the Google Summer of Docs initiative. In the past I have been more than happy to document C++ code using only Doxygen (with pretty fantastic results), while keeping example usage separate (d-SEAMS wiki). Though this is still a feasible method, a monolithic multi-project setup might benefit from Sphinx, which is what will be covered.</description></item><item><title>Local Nix without Root</title><link>https://rgoswami.me/posts/local-nix-no-root/</link><pubDate>Mon, 07 Sep 2020 18:30:00 +0000</pubDate><guid>https://rgoswami.me/posts/local-nix-no-root/</guid><description>Monkeying around with nix for HPC systems which have no root access and NFS filesystems.
Background Nix is not well known for being friendly to users without root access. This is typically made worse by the &amp;ldquo;exotic&amp;rdquo; filesystem attributes common to HPC networks (this also plagues hermes). An earlier post details how and why proot failed. The short pitch is simply:
Figure 1: Does your HPC look like this?</description></item><item><title>Niv and Mach-Nix for Nix Python</title><link>https://rgoswami.me/posts/mach-nix-niv-python/</link><pubDate>Wed, 26 Aug 2020 05:42:00 +0000</pubDate><guid>https://rgoswami.me/posts/mach-nix-niv-python/</guid><description>Short post on using mach-nix with niv.
Background In previous posts, there was a discussion on a ground up approach to adding packages which aren&amp;rsquo;t on the core nixpkgs channels using GitHub or PyPi sources. However, this lacked a way to do so programmatically, and also a way to convert existing python projects.
Python Dependency Management This time, instead of the more pedagogical approach of building packages from PyPi or GitHub, we will use overlays and the excellent mach-nix to speed up the process.</description></item><item><title>Nix Shells for Node Projects</title><link>https://rgoswami.me/posts/nix-shell-node/</link><pubDate>Sun, 23 Aug 2020 10:09:00 +0000</pubDate><guid>https://rgoswami.me/posts/nix-shell-node/</guid><description>Background As a prelude to writing up the details of how this site is generated, I realized I should write up a nix oriented workflow for node packages.
Tooling and Idea The basic concepts are:
Use npm to generate a package-lock.json file Use node2nix in a shell to generate a set of nix derivations Enter a shell environment with the nix inputs Profit However, the nuances of this are a bit annoying at first.</description></item><item><title>A Tutorial Introduction to Nix</title><link>https://rgoswami.me/posts/ccon-tut-nix/</link><pubDate>Tue, 18 Aug 2020 16:18:00 +0000</pubDate><guid>https://rgoswami.me/posts/ccon-tut-nix/</guid><description>Brief introduction to a nix based project workflow.
Background For CarpentryCon@Home 2020, along with Amrita Goswami, I am to prepare and deliver a workshop on &amp;ldquo;Reproducible Environments with the Nix Packaging System&amp;rdquo;. In particular, as a community of practice lesson, the focus is not on packaging (as is typical of most Nix tutorials) nor on the Nix expression language itself, but instead on the use of Nix as a replacement for virtual environments using mkShell.</description></item><item><title>HPC Dotfiles and LMod</title><link>https://rgoswami.me/posts/hpc-dots-lmod/</link><pubDate>Sun, 09 Aug 2020 02:29:00 +0000</pubDate><guid>https://rgoswami.me/posts/hpc-dots-lmod/</guid><description>Background My move away from the powerful, but unimaginatively named HPC clusters of IITK 1 brought me in close contact with the Lua based 2 lmod module system. Rather than fall into the rabbit hole of brew we will leverage the existing system to add our new libraries. Not finding any good collections of these composable environments, and having failed once before to install Nix as a user without admin access, I decided to start my own collection of Lmod recipies.</description></item><item><title>Explorations with Backlight Controllers</title><link>https://rgoswami.me/posts/expl-backlight-control/</link><pubDate>Sat, 01 Aug 2020 20:00:00 +0000</pubDate><guid>https://rgoswami.me/posts/expl-backlight-control/</guid><description>A short post detailing the many trials and tribulations of setting brightness on multiple monitors in tandem.
Background As regular readers might know, I have a multi-screen setup, which accounts for having touch enabled on my primary laptop screen (detailed here). A failing of this setup was that I was not able to control the brightness of both monitors at the same time.
Existing Stack Since I use i3, my brightness control is simply done with bindsym lines as follows1:</description></item><item><title>A Short Guide to Statistical Rethinking²</title><link>https://rgoswami.me/posts/some-sol-sr2/</link><pubDate>Fri, 24 Jul 2020 17:35:00 +0000</pubDate><guid>https://rgoswami.me/posts/some-sol-sr2/</guid><description>A meta post introducing my solutions to the fantastic excellent second edition of &amp;ldquo;Statistical Rethinking&amp;rdquo; by Richard McElreath, a.k.a. Statistical Rethinking². Also discusses strategies to keep up with the material, mostly meant for self-study groups.
Background As detailed previously, I recently was part of a course centered around Bayesian modeling for the Icelandic COVID-19 pandemic. The Bayesian mindset needs no introduction, and this post is completely inadequete to explain why anyone should be interested (that&amp;rsquo;s what the book is for!</description></item><item><title>Multiple Monitors with Touchscreens</title><link>https://rgoswami.me/posts/multi-monitor-touch/</link><pubDate>Sat, 11 Jul 2020 22:45:00 +0000</pubDate><guid>https://rgoswami.me/posts/multi-monitor-touch/</guid><description>A short tutorial post on multiple screens for laptops with touch-support and ArchLinux. Also evolved into a long rant, with an Easter egg.
Background Of late, I have been attempting to move away from paper, for environmental reasons1. Years of touch typing in Colemak (rationale, config changes) and a very customized Emacs setup (including mathematica, temporary latex templates, Nix, and org-roam annotations) have more or less kept me away from analog devices.</description></item><item><title>Analytics II: Goat to Clicky</title><link>https://rgoswami.me/posts/goat-clicky/</link><pubDate>Mon, 06 Jul 2020 23:09:00 +0000</pubDate><guid>https://rgoswami.me/posts/goat-clicky/</guid><description>A follow up to my earlier post on analytics, and on migrating from Goat Counter to Clicky.
Background A few days ago I recieved the following email:
Hi there!
I made some changes to the GoatCounter plans/pricing:
GoatCounter now has a &amp;ldquo;Starter&amp;rdquo; plan, this is €5/month, limited to 100k pageviews/month, comes with a custom domain, and allow commercial use. This is mostly the same as the &amp;ldquo;personal plus&amp;rdquo; plan there was before, except that it allows commercial use.</description></item><item><title>Temporary LaTeX Documents with Orgmode</title><link>https://rgoswami.me/posts/org-arb-tex/</link><pubDate>Fri, 19 Jun 2020 05:07:00 +0000</pubDate><guid>https://rgoswami.me/posts/org-arb-tex/</guid><description>A post on working with transient TeX templates in orgmode without modifying global configurations. This will also serve as a rudimentary introduction to TeX in orgmode.
Background The sad reality of working in a field dominated by institutional actors which do not care for recognizing software development as a skill is that there are often a lot of ugly LaTeX templates1. In particular, often Universities have arbitrary LaTeX templates from the the dark days of 2010 something, which include gratuitous usage of say, natbib instead of biblatex.</description></item><item><title>Emacs for Nix-R</title><link>https://rgoswami.me/posts/emacs-nix-r/</link><pubDate>Wed, 10 Jun 2020 00:12:00 +0000</pubDate><guid>https://rgoswami.me/posts/emacs-nix-r/</guid><description>A short post on my current set-up for R with nixpkgs and emacs to auto-compile my system configuration.
Background This is my third post on working with nixpkgs and R.
Part I covered ways of working effectively with R and nixpkgs Part II dealt with composing dependent devtools packages in a per-package environment, with a focus on rethinking and tidybayes.rethinking This final part is about automating the system-wide configuration using emacs.</description></item><item><title>Statistical Rethinking and Nix</title><link>https://rgoswami.me/posts/rethinking-r-nix/</link><pubDate>Sun, 07 Jun 2020 04:24:00 +0000</pubDate><guid>https://rgoswami.me/posts/rethinking-r-nix/</guid><description>This post describes how to set up a transparent automated setup for reproducible R workflows using nixpkgs, niv, and lorri. The explanatory example used throughout the post is one of setting up the rethinking package and running some examples from the excellent second edition of &amp;ldquo;Statistical Rethinking&amp;rdquo; by Richard McElreath.
Background As detailed in an earlier post1, I had set up Nix to work with non-CRAN packages. If the rest of this section is unclear, please refer back to the earlier post.</description></item><item><title>Nix with R and devtools</title><link>https://rgoswami.me/posts/nix-r-devtools/</link><pubDate>Sat, 06 Jun 2020 05:49:00 +0000</pubDate><guid>https://rgoswami.me/posts/nix-r-devtools/</guid><description>This post discusses briefly, the nix-shell environment for reproducible programming. In particular, there is an emphasis on extensions for installing and working with packages not in CRAN, i.e. packages off Github which are normally installed with devtools.
Background The entire nix ecosystem is fantastic, and is the main packaging system used by d-SEAMS as well. Recently I began working through the excellent second edition of &amp;ldquo;Statistical Rethinking&amp;rdquo; by Richard McElreath1.</description></item><item><title>Compton to Picom and Zoom Glitches</title><link>https://rgoswami.me/posts/compton-zoom-shadow/</link><pubDate>Tue, 12 May 2020 01:32:00 +0000</pubDate><guid>https://rgoswami.me/posts/compton-zoom-shadow/</guid><description>Background I have been leading the fantastic section 881 as a virtual section leader for the Stanford CS106A: Code in Place initiative for the past four weeks. I have also spent a lot of time on Zoom, sharing my screen. Fun fact. My screen shares look like this:
Figure 1: Zoom screen share with weird overlay
This post is about hunting down what caused this amazing zoom glitch1 and how I finally fixed it.</description></item><item><title>An Orgmode Note Workflow</title><link>https://rgoswami.me/posts/org-note-workflow/</link><pubDate>Sun, 10 May 2020 15:01:00 +0000</pubDate><guid>https://rgoswami.me/posts/org-note-workflow/</guid><description>Background One of the main reasons to use orgmode is definitely to get a better note taking workflow. Closely related to blogging or writing, the ideal note workflow is one which lets you keep a bunch of throwaway ideas and also somehow have access to them in a coherent manner. This will be a long post, and it is a work-in-progress, so, keep that in mind. Since this is mainly me1 work-shopping my technique, the philosophy will come in a later post probably.</description></item><item><title>Refactoring Dotfiles For Colemak</title><link>https://rgoswami.me/posts/colemak-dots-refactor/</link><pubDate>Sat, 02 May 2020 20:30:00 +0000</pubDate><guid>https://rgoswami.me/posts/colemak-dots-refactor/</guid><description>A more actionable follow up to my personal recollections relating to my switch to Colemak.
Background I have, in the past written about how I made the switch to Colemak. However, until recently, I was still trying to mimic the VIM keybindings from QWERTY. This is a post where I discuss the changes I made to ensure that I never have to stretch my fingers in odd ways again. The main idea is expressed well by vim-colemak.</description></item><item><title>Pandoc to Orgmode with Babel</title><link>https://rgoswami.me/posts/org-pandoc-babel/</link><pubDate>Sat, 02 May 2020 16:39:00 +0000</pubDate><guid>https://rgoswami.me/posts/org-pandoc-babel/</guid><description>Background One of the best things about writing in orgmode is that we can embed and execute arbitrary code snippets. However, not all languages have an exporter, for obvious reasons. Somewhat surprisingly, there is no way to call pandoc on embedded snippets, which feels like a waste, especially when a whole bunch of documentation formats can be converted to orgmode with it.
Consider the following beautifully highlighted snippet of an rst (ReStructured Text) list table.</description></item><item><title>Using Mathematica with Orgmode</title><link>https://rgoswami.me/posts/org-mathematica/</link><pubDate>Sun, 26 Apr 2020 20:01:00 +0000</pubDate><guid>https://rgoswami.me/posts/org-mathematica/</guid><description>Background I have been wanting to find a workflow which allows me to bypass writing a lot of TeX by hand for a while now. To that end I looked into using a computer algebra system (CAS). Naturally, my first choice was the FOSS Maxima (also because it uses Lisp under the hood). However, for all the reasons listed here, relating to its accuracy, which have not been fixed even though the post was over 5 years ago, I ended up having to go with the closed source Mathematica.</description></item><item><title>Analytics: Google to Goat</title><link>https://rgoswami.me/posts/goat-google/</link><pubDate>Thu, 09 Apr 2020 17:17:00 +0000</pubDate><guid>https://rgoswami.me/posts/goat-google/</guid><description>Background Like a lot of my tech based rants, this was brought on by a recent Hacker News post. I won&amp;rsquo;t go into why the product listed there is a hollow faux FOSS rip-off. I won&amp;rsquo;t discuss how the &amp;lsquo;free&amp;rsquo; analytics option, like many others are just hobby projects taking pot shots at other projects. Or how insanely overpriced most alternatives are.
I will however discuss why and how I transitioned to using the awesome Goat Counter.</description></item><item><title>D3 for Git</title><link>https://rgoswami.me/posts/d3git/</link><pubDate>Mon, 16 Mar 2020 00:17:00 +0000</pubDate><guid>https://rgoswami.me/posts/d3git/</guid><description>Background I have had a lot of discussions regarding the teaching of git This is mostly as a part of the SoftwareCarpentries, or in view of my involvement with univ.ai, or simply in every public space I am associated with Without getting into my views, I just wanted to keep this resource in mind The site Learning git is a highly contentious thing People seem to be fond of GUI tools, especially since on non *nix systems, it seems that there is a lot of debate surrounding obtaining the git utility in the first place One of the best ways of understanding (without installing stuff) the mental models required for working with git is this site</description></item><item><title>Shorter Posts</title><link>https://rgoswami.me/posts/shortpost/</link><pubDate>Mon, 16 Mar 2020 00:16:00 +0000</pubDate><guid>https://rgoswami.me/posts/shortpost/</guid><description>Background Sometime this year, I realized that I no longer have access to a lot of my older communication. This included, a lot of resources I enjoyed and shared with the people who were around me at that point in time. To counter this, I have decided to opt for shorter posts, even if they don&amp;rsquo;t always include the same level of detail I would prefer to provide.
Alternatives I have an automated system based around IFTTT combined with Twitter, Diigo, and even Pocket However, that doesn&amp;rsquo;t really tell me much, and trawling through a massive glut of data is often pointless as well There&amp;rsquo;s always Twitter, but I don&amp;rsquo;t really care to hear the views of others when I want to revisit my own ideas Conclusions I will be making shorter posts here, like the random one on octobox</description></item><item><title>Provisioning Dotfiles on an HPC</title><link>https://rgoswami.me/posts/prov-dots/</link><pubDate>Mon, 16 Mar 2020 00:06:00 +0000</pubDate><guid>https://rgoswami.me/posts/prov-dots/</guid><description>Background My dotfiles turned 4 years old a few months ago (since 9th Jan 2017) and remains one of my most frequently updated projects for obvious reasons. Going through the changes reminds me of a whole of posts I never got around to writing.
Anyway, recently I gained access to another HPC cluster, with a standard configuration (bash, old CentOS) and decided to track my provisioning steps. This is really a very streamlined experience by now, since I&amp;rsquo;ve used the same setup across scores of machines.</description></item><item><title>Switching to Colemak</title><link>https://rgoswami.me/posts/colemak-switch/</link><pubDate>Sat, 29 Feb 2020 14:06:00 +0000</pubDate><guid>https://rgoswami.me/posts/colemak-switch/</guid><description>Thoughts on and rationale behind leaving QWERTY and touch typing in general. Followed by this post on refactoring my Dotfiles.
Background I just realized that it has been over two years since I switched from QWERTY to Colemak but somehow never managed to write about it. It was a major change in my life, and it took forever to get acclimatized to. I do not think I&amp;rsquo;ll ever again be in a position to make such a change in my life again, but it was definitely worth it.</description></item><item><title>Pandora and Proxychains</title><link>https://rgoswami.me/posts/pandora-proxychains/</link><pubDate>Sat, 15 Feb 2020 05:28:00 +0000</pubDate><guid>https://rgoswami.me/posts/pandora-proxychains/</guid><description>Background Pandora doesn&amp;rsquo;t work outside the states I keep forgetting how to set-up proxychains Proxychains Technically this article expects proxychains-ng, which seems to be the more up-to-date fork of the original proxychains.
Install proxychains-ng 1# I am on archlinux.. 2sudo pacman -S proxychains-ng Copy the configuration to the $HOME directory 1cp /etc/proxychains.conf . Edit said configuration to add some US-based proxy In my particular case, I don&amp;rsquo;t keep the tor section enabled.</description></item><item><title>Replacing Jupyter with Orgmode</title><link>https://rgoswami.me/posts/jupyter-orgmode/</link><pubDate>Thu, 13 Feb 2020 22:36:00 +0000</pubDate><guid>https://rgoswami.me/posts/jupyter-orgmode/</guid><description>Background I dislike Jupyter notebooks (and JupyterHub) a lot EIN is really not much of a solution either In the past I have written some posts on TeX with JupyterHub and discussed ways to use virtual Python with JupyterHub in a more reasonable manner.
However, I personally found that EIN was a huge pain to work with, and I mostly ended up working with the web-interface anyway.
It is a bit redundant to do so, given that at-least for my purposes, the end result was a LaTeX document.</description></item><item><title>Poetry and Direnv</title><link>https://rgoswami.me/posts/poetry-direnv/</link><pubDate>Thu, 13 Feb 2020 21:36:00 +0000</pubDate><guid>https://rgoswami.me/posts/poetry-direnv/</guid><description>Background I end up writing about using poetry a lot I almost always use direnv in real life too I don&amp;rsquo;t keep writing mini scripts in my .envrc Honestly there&amp;rsquo;s nothing here anyone using the direnv wiki will find surprising, but then it is still neat to link back to.
Setting Up Poetry This essentially works by simply modifying the global .direnvrc which essentially gets sourced by every local .envrc anyway.</description></item><item><title>Taming Github Notifications</title><link>https://rgoswami.me/posts/ghnotif/</link><pubDate>Wed, 12 Feb 2020 11:36:00 +0000</pubDate><guid>https://rgoswami.me/posts/ghnotif/</guid><description>Background As a member of several large organizations, I get a lot of github notifications. Not all of these are of relevance to me. This is especially true of psuedo-monorepo style repositories like the JOSS review system and especially the exercism community.
I recently (re-)joined the exercism community as a maintainer for the C++ lessons after having been a (sporadic) teacher This was largely in response to a community call to action as the group needed new blood to usher in v3 of the exercism project Anyway, I have since found that at the small cost of possibly much of my public repo data, I can manage my notifications better with Octobox</description></item></channel></rss>