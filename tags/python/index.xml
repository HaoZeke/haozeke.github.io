<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on Rohit Goswami</title><link>https://rgoswami.me/tags/python/</link><description>Recent content in python on Rohit Goswami</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0&lt;/a>.</copyright><lastBuildDate>Wed, 15 Nov 2023 19:06:00 +0000</lastBuildDate><atom:link href="https://rgoswami.me/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Off the shelf OCR and Deep Learning</title><link>https://rgoswami.me/snippets/oshelf-ocr-dl/</link><pubDate>Wed, 15 Nov 2023 19:06:00 +0000</pubDate><guid>https://rgoswami.me/snippets/oshelf-ocr-dl/</guid><description>In general, detexify (here) and my ScanTools workflow is great. However, sometimes more can be done.
1micromamba create -n textocr 2micromamba activate textocr 3micromamba install torchvision -c pytorch 4pip install pix2tex[gui] 5pip install python-doctr 6pip install nougat-ocr The TeX tool (LaTeX OCR) works great even via the terminal. The doctr library is a bit more finicky, but can be a decent way to extract plain text when regular OCR tools fail (e.</description></item><item><title>Types from Fortran to Python via Opaque Pointers</title><link>https://rgoswami.me/posts/types-fortran-python-opaque/</link><pubDate>Sun, 12 Nov 2023 23:36:00 +0000</pubDate><guid>https://rgoswami.me/posts/types-fortran-python-opaque/</guid><description>An exploration of the opaque object and pointer interface approach to unleash more modern features than those offered by the ISO Fortran standard.
Background Since this has been covered a few times before, just some quick pointers1. The ultimate context is to be able take nice, modern Fortran code with derived types and generate equally nice, user friendly, efficient Python wrappers via f2py.
Why? Where the last post (and the test implementation in f2py) left off, the type shadowing approach for having exactly interoperable bind(c) derived types (and functions) was covered.</description></item><item><title>CPP Library Blueprints for Python Bindings</title><link>https://rgoswami.me/posts/cpp-library-blueprints-pybind/</link><pubDate>Wed, 28 Jun 2023 11:27:00 +0000</pubDate><guid>https://rgoswami.me/posts/cpp-library-blueprints-pybind/</guid><description>Design guidelines for thin Python wrappers to C++ libraries
Background I recently ended up writing and rewriting a series of libraries to essentially get them to a point where I could write bindings to them. In doing so, some thoughts on design have evolved into this post.
False starts Originally, I had the library and bindings in one repository, which was easier to hack on, and had fewer moving parts.</description></item><item><title>Supplements for SciPy 2022</title><link>https://rgoswami.me/posts/scipycon-2022-meta/</link><pubDate>Tue, 15 Nov 2022 23:28:00 +0000</pubDate><guid>https://rgoswami.me/posts/scipycon-2022-meta/</guid><description>A meta-post on my in-person attendance of the 2022 SciPy Conference
Background I hadn&amp;rsquo;t been in an in-person conference for quite a long while now. There were multiple things going for SciPyCon. Collaborators at UT Austin (from the EON project). The prospect of meeting folks from Quansight. Meeting other members of the NumPy community I&amp;rsquo;d been working with virtually for a year. I had the pleasure of being the recipient of a SciPy Scholarship for my poster and conference proceeding on Wailord, which sealed the deal for me.</description></item><item><title>Fortran OOP and Python</title><link>https://rgoswami.me/posts/fortran-oop-python/</link><pubDate>Mon, 09 May 2022 03:39:00 +0000</pubDate><guid>https://rgoswami.me/posts/fortran-oop-python/</guid><description>Explorations of object oriented Fortran with bind(c) derived types for representations generated by F2PY
Background Derived types are easily one of the most visible of the modern Fortran (post-F90) features and are central to object oriented programming paradigms in Fortarn.
For those new to the language, a rough guide to some terminology:
Fortran Closest C/C++ equivalent derived type struct extends type inherited class final destructor not standard conforming undefined behaviour Only the first of these are actually covered in terms of interoperability with C as of the F2018 draft standard.</description></item><item><title>Mach-Nix and Shell Environments</title><link>https://rgoswami.me/snippets/mach-nix-shell-env/</link><pubDate>Mon, 17 Jan 2022 02:28:00 +0000</pubDate><guid>https://rgoswami.me/snippets/mach-nix-shell-env/</guid><description>I often need to set up quick virtual environments. Unfortunately, the standard approach to work with this in nix deals with the local nixpkgs mechanism for python dependencies:
1nix-shell -p &amp;#34;python38.withPackages(ps: [ ps.numpy ps.sh ])&amp;#34; However there is a catch for packages which are not officially present upstream.
1# Fails! 2nix-shell -p &amp;#34;python38.withPackages(ps: [ ps.numpy ps.sh ps.lieer ])&amp;#34; However, the mach-nix project can indeed be used to work around this, at the cost of a somewhat longer command.</description></item><item><title>Simple Fortran Derived Types and Python</title><link>https://rgoswami.me/posts/cython-derivedtype-f2py/</link><pubDate>Sat, 02 Oct 2021 04:19:00 +0000</pubDate><guid>https://rgoswami.me/posts/cython-derivedtype-f2py/</guid><description>Moving simple Fortran derived types to Python and back via C
Background Object oriented programming has been part of Fortran for longer than I have been alive 1. Fortran has derived types now. They&amp;rsquo;ve been around for around for over three decades. The standards at the same time, have been supporting more and more interoperable operations. Details of these pleasant historical improvements are pretty much the most the Fortran standards committee have managed to date in the 21st century.</description></item><item><title>NumPy, Meson and f2py</title><link>https://rgoswami.me/posts/numpy-meson-f2py/</link><pubDate>Thu, 23 Sep 2021 05:45:00 +0000</pubDate><guid>https://rgoswami.me/posts/numpy-meson-f2py/</guid><description>Exploring meson for interfacing fortran and python via f2py and standard techniques, with benchmarks.
Background A recent post gauging community interest in f2py brought to light (among other aspects) the fact that the build systems of f2py are rather opaque to the end user. There are good reasons for this, since many of the tools discussed in this post were not around / in any shape to be used during the active development of f2py1.</description></item><item><title>Talk Supplements for Code In Place 2021 SL Workshop</title><link>https://rgoswami.me/posts/cip-2021-slw-meta/</link><pubDate>Sat, 29 May 2021 07:07:00 +0000</pubDate><guid>https://rgoswami.me/posts/cip-2021-slw-meta/</guid><description>A meta-post on the workshop I held for the Section Leaders of Code in Place 2021 entitled &amp;ldquo;Wrangling Pythons with Nix for Reproducible Purity&amp;rdquo;
Background Much the same as the rationale behind my other presentation meta-posts, that is:
I would like to preserve questions I would like to collect the video, slides and other miscellaneous stuff in one location 1 It would be nice to have my own thoughts here afterwards Details Blurb verbatim from the spreadsheet.</description></item><item><title>Talk Supplements for IOP's C++ Workshop</title><link>https://rgoswami.me/posts/iop-cpp-2021-meta/</link><pubDate>Wed, 14 Apr 2021 01:17:00 +0000</pubDate><guid>https://rgoswami.me/posts/iop-cpp-2021-meta/</guid><description>A meta-post on the workshop I held for the IOP student community on Intermediate C++
Background Much the same as the rationale behind my other presentation meta-posts, that is:
I would like to preserve questions I would like to collect the video, slides and other miscellaneous stuff in one location 1 It would be nice to have my own thoughts here afterwards Details Blurb verbatim from the workshop announcement.</description></item><item><title>Talk Supplements for PyCon India 2020</title><link>https://rgoswami.me/posts/pycon-in-2020-meta/</link><pubDate>Fri, 02 Oct 2020 23:56:00 +0000</pubDate><guid>https://rgoswami.me/posts/pycon-in-2020-meta/</guid><description>A meta-post on my talk at PyCon India 2020
Background I am to present at PyCon IN 2020. Some of the motivating reasons for having a post are:
I would like to preserve questions I would like to collect the video, slides and other miscellaneous stuff in one location 1 It would be nice to have my own thoughts here afterwards Details of this happy circumstance are reproduced below from the CFP here.</description></item><item><title>Niv and Mach-Nix for Nix Python</title><link>https://rgoswami.me/posts/mach-nix-niv-python/</link><pubDate>Wed, 26 Aug 2020 05:42:00 +0000</pubDate><guid>https://rgoswami.me/posts/mach-nix-niv-python/</guid><description>Short post on using mach-nix with niv.
Background In previous posts, there was a discussion on a ground up approach to adding packages which aren&amp;rsquo;t on the core nixpkgs channels using GitHub or PyPi sources. However, this lacked a way to do so programmatically, and also a way to convert existing python projects.
Python Dependency Management This time, instead of the more pedagogical approach of building packages from PyPi or GitHub, we will use overlays and the excellent mach-nix to speed up the process.</description></item><item><title>A Tutorial Introduction to Nix</title><link>https://rgoswami.me/posts/ccon-tut-nix/</link><pubDate>Tue, 18 Aug 2020 16:18:00 +0000</pubDate><guid>https://rgoswami.me/posts/ccon-tut-nix/</guid><description>Brief introduction to a nix based project workflow.
Background For CarpentryCon@Home 2020, along with Amrita Goswami, I am to prepare and deliver a workshop on &amp;ldquo;Reproducible Environments with the Nix Packaging System&amp;rdquo;. In particular, as a community of practice lesson, the focus is not on packaging (as is typical of most Nix tutorials) nor on the Nix expression language itself, but instead on the use of Nix as a replacement for virtual environments using mkShell.</description></item><item><title>Poetry and Direnv</title><link>https://rgoswami.me/posts/poetry-direnv/</link><pubDate>Thu, 13 Feb 2020 21:36:00 +0000</pubDate><guid>https://rgoswami.me/posts/poetry-direnv/</guid><description>Background I end up writing about using poetry a lot I almost always use direnv in real life too I don&amp;rsquo;t keep writing mini scripts in my .envrc Honestly there&amp;rsquo;s nothing here anyone using the direnv wiki will find surprising, but then it is still neat to link back to.
Setting Up Poetry This essentially works by simply modifying the global .direnvrc which essentially gets sourced by every local .envrc anyway.</description></item></channel></rss>