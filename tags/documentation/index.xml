<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>documentation on Rohit Goswami</title><link>https://rgoswami.me/tags/documentation/</link><description>Recent content in documentation on Rohit Goswami</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0&lt;/a>.</copyright><lastBuildDate>Sun, 23 May 2021 05:37:00 +0000</lastBuildDate><atom:link href="https://rgoswami.me/tags/documentation/index.xml" rel="self" type="application/rss+xml"/><item><title>Biblatex to Bibtex for Sphinx</title><link>https://rgoswami.me/posts/zotero-biblatex-bibtex/</link><pubDate>Sun, 23 May 2021 05:37:00 +0000</pubDate><guid>https://rgoswami.me/posts/zotero-biblatex-bibtex/</guid><description>Background Transitioning from biblatex to bibtex with biber for sphinx
I recently started a set of notes using jupyter-book. However, in the process I ran into a horrific bibliography related SNAFU. sphinx in its infinite wisdom only accepts a rather odd subset of bibtex.
I have been happily exporting my giant bibliography with Zotero (and better bibtex) exporting my references as biblatex while sphinx started choking dreadfully. This post describes attempts to reconcile the biblatex sources without manual intervention.</description></item><item><title>Project Specific Expressions from Nixpkgs for Sphinx documentation</title><link>https://rgoswami.me/posts/nix-prj-spec-doc/</link><pubDate>Tue, 22 Dec 2020 05:09:00 +0000</pubDate><guid>https://rgoswami.me/posts/nix-prj-spec-doc/</guid><description>Short post on making minimal changes to derivations in nixpkgs at a project level using callPackage() along with GH-Actions for deployment of sphinx documentation.
Background As part of my work on the Symengine documentation1, I had originally thought of leveraging nix for reproducible builds for each of the language bindings with GH-Actions. There exists a derivation in the upstream package repository, but it was outdated (v6.0.0 instead of v6.0.1)Â 2.</description></item><item><title>Publishing Doxygen and Sphinx with Nix and Rake</title><link>https://rgoswami.me/posts/pub-doc-cpp-dox-sph-nix/</link><pubDate>Tue, 22 Sep 2020 10:30:00 +0000</pubDate><guid>https://rgoswami.me/posts/pub-doc-cpp-dox-sph-nix/</guid><description>Automating documenation deployment with Travis, rake and nix
Background In the previous post we generated documentation using Doxygen with Exhale to handle Sphinx. Now we will clean up the earlier workflow with rake and ensure the environment is reproducible with nix while deploying to Travis CI.
Series Documenting C++ with Doxygen and Sphinx - Exhale Publishing Doxygen and Sphinx with Nix and Rake &amp;lt;&amp;ndash; You are here Documenting C++ with Doxygen and Sphinx - doxyrest Adding Tutorials to Sphinx Projects Setup A quick reminder of the setup we generated in the last post:</description></item><item><title>Documenting C++ with Doxygen and Sphinx - Exhale</title><link>https://rgoswami.me/posts/doc-cpp-dox-sph-exhale/</link><pubDate>Tue, 22 Sep 2020 06:58:00 +0000</pubDate><guid>https://rgoswami.me/posts/doc-cpp-dox-sph-exhale/</guid><description>This post outlines a basic workflow for C++ projects using Doxygen, Sphinx, and Exhale.
Background My project proposal for documenting Symengine was recently accepted for the Google Summer of Docs initiative. In the past I have been more than happy to document C++ code using only Doxygen (with pretty fantastic results), while keeping example usage separate (d-SEAMS wiki). Though this is still a feasible method, a monolithic multi-project setup might benefit from Sphinx, which is what will be covered.</description></item></channel></rss>