<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rambling on Rohit Goswami</title><link>https://rgoswami.me/tags/rambling/</link><description>Recent content in rambling on Rohit Goswami</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0&lt;/a>.</copyright><lastBuildDate>Mon, 09 May 2022 03:39:00 +0000</lastBuildDate><atom:link href="https://rgoswami.me/tags/rambling/index.xml" rel="self" type="application/rss+xml"/><item><title>Fortran OOP and Python</title><link>https://rgoswami.me/posts/fortran-oop-python/</link><pubDate>Mon, 09 May 2022 03:39:00 +0000</pubDate><guid>https://rgoswami.me/posts/fortran-oop-python/</guid><description>Explorations of object oriented Fortran with bind(c) derived types for representations generated by F2PY
Background Derived types are easily one of the most visible of the modern Fortran (post-F90) features and are central to object oriented programming paradigms in Fortarn.
For those new to the language, a rough guide to some terminology:
Fortran Closest C/C++ equivalent derived type struct extends type inherited class final destructor not standard conforming undefined behaviour Only the first of these are actually covered in terms of interoperability with C as of the F2018 draft standard.</description></item><item><title>Revisiting Wayland for ArchLinux</title><link>https://rgoswami.me/posts/revisiting-wayland-2021-archlinux/</link><pubDate>Fri, 24 Dec 2021 18:13:00 +0000</pubDate><guid>https://rgoswami.me/posts/revisiting-wayland-2021-archlinux/</guid><description>Ruminating on wayland and sway for daily use with ArchLinux
Background Many years ago, I found time to make an attempt to switch away from the X11 Window system to Wayland. At the time, I ended up switching back to Xorg, but I did want to revisit it. Since I returned from home recently and was gifted a Gen 6 ThinkPad X1 Carbon, I had a perfect opportunity to do so 1.</description></item><item><title>Exploring ISO_C_BINDING and type-bound procedures</title><link>https://rgoswami.me/posts/iso-c-type-bound-fortran/</link><pubDate>Sun, 19 Dec 2021 16:25:00 +0000</pubDate><guid>https://rgoswami.me/posts/iso-c-type-bound-fortran/</guid><description>A closer look at the standard Fortran C compatibility layer by exploring objects and linkers
Background Derived types and their interoperability have been covered previously in the context of usage from Python. However, much of the focus of the previous approach revolved around the iso_c_binding intrinsic module. A closer inspection of the functionality provided therein is the first step towards extending beyond the standards to support calling type bound procedures.</description></item><item><title>Simple Fortran Derived Types and Python</title><link>https://rgoswami.me/posts/cython-derivedtype-f2py/</link><pubDate>Sat, 02 Oct 2021 04:19:00 +0000</pubDate><guid>https://rgoswami.me/posts/cython-derivedtype-f2py/</guid><description>Moving simple Fortran derived types to Python and back via C
Background Object oriented programming has been part of Fortran for longer than I have been alive 1. Fortran has derived types now. They&amp;rsquo;ve been around for around for over three decades. The standards at the same time, have been supporting more and more interoperable operations. Details of these pleasant historical improvements are pretty much the most the Fortran standards committee have managed to date in the 21st century.</description></item><item><title>NumPy, Meson and f2py</title><link>https://rgoswami.me/posts/numpy-meson-f2py/</link><pubDate>Thu, 23 Sep 2021 05:45:00 +0000</pubDate><guid>https://rgoswami.me/posts/numpy-meson-f2py/</guid><description>Exploring meson for interfacing fortran and python via f2py and standard techniques, with benchmarks.
Background A recent post gauging community interest in f2py brought to light (among other aspects) the fact that the build systems of f2py are rather opaque to the end user. There are good reasons for this, since many of the tools discussed in this post were not around / in any shape to be used during the active development of f2py1.</description></item><item><title>GSoC21 LFortran and Computational Chemistry</title><link>https://rgoswami.me/posts/gsoc21-fin-reprot/</link><pubDate>Fri, 20 Aug 2021 00:43:00 +0000</pubDate><guid>https://rgoswami.me/posts/gsoc21-fin-reprot/</guid><description>Directed recollections of the GSoC21 timeline
Background If the last ten weeks of weekly posts have not made it clear; as a student developer in the Google Summer of Code in the year 2021; I was privileged to work on the LFortran compiler alongside Gagandeep Singh and Thirumalai Shaktivel under the fantastic mentorship of Ondřej Čertík under the Fortran-Lang organization.
Series This post is going to be generally expositionary in tone; but the series is also reproduced.</description></item><item><title>GSoC21 W10: LFortran Runtime Library Design</title><link>https://rgoswami.me/posts/gsoc21-w10/</link><pubDate>Sat, 14 Aug 2021 00:28:00 +0000</pubDate><guid>https://rgoswami.me/posts/gsoc21-w10/</guid><description>The road to accurate elementary intrinsic functions is paved with IEEE/ISO standards
Background Serialized update for the 2021 Google Summer of Code under the fortran-lang organization, mentored by Ondrej Certik.
Series This post is part of a series based around my weekly GSoC21 project check-ins.
GSoC21 W1: LFortran Kickoff GSoC21 W2: LFortran Unraveling GSoC21 W3: Kind, Characters, and Standards GSoC21 W4: LFortran, Backends and Bugs GSoC21 W5: LFortran Design Details and minidftatom GSoC21 W6: LFortran ASR and Values GSoC21 W7: LFortran Workflow Basics GSoC21 W8: LFortran Refactors, and Compile Time Evaluations GSoC21 W9: LFortran Bug Hunting Bonanza GSoC21 W10: LFortran Runtime Library Design &amp;lt;&amp;ndash; You are here!</description></item><item><title>GSoC21 W9: LFortran Bug Hunting Bonanza</title><link>https://rgoswami.me/posts/gsoc21-w9/</link><pubDate>Fri, 06 Aug 2021 19:50:00 +0000</pubDate><guid>https://rgoswami.me/posts/gsoc21-w9/</guid><description>Continuing compile time intrinsic functions, ASR passes, and testing LAPACK
Background Serialized update for the 2021 Google Summer of Code under the fortran-lang organization, mentored by Ondrej Certik.
Series This post is part of a series based around my weekly GSoC21 project check-ins.
GSoC21 W1: LFortran Kickoff GSoC21 W2: LFortran Unraveling GSoC21 W3: Kind, Characters, and Standards GSoC21 W4: LFortran, Backends and Bugs GSoC21 W5: LFortran Design Details and minidftatom GSoC21 W6: LFortran ASR and Values GSoC21 W7: LFortran Workflow Basics GSoC21 W8: LFortran Refactors, and Compile Time Evaluations GSoC21 W9: LFortran Bug Hunting Bonanza &amp;lt;&amp;ndash; You are here!</description></item><item><title>GSoC21 W8: LFortran Refactors, and Compile Time Evaluations</title><link>https://rgoswami.me/posts/gsoc21-w8/</link><pubDate>Fri, 30 Jul 2021 17:11:00 +0000</pubDate><guid>https://rgoswami.me/posts/gsoc21-w8/</guid><description>Language standardese and implementations
Background Serialized update for the 2021 Google Summer of Code under the fortran-lang organization, mentored by Ondrej Certik.
Series This post is part of a series based around my weekly GSoC21 project check-ins.
GSoC21 W1: LFortran Kickoff GSoC21 W2: LFortran Unraveling GSoC21 W3: Kind, Characters, and Standards GSoC21 W4: LFortran, Backends and Bugs GSoC21 W5: LFortran Design Details and minidftatom GSoC21 W6: LFortran ASR and Values GSoC21 W7: LFortran Workflow Basics GSoC21 W8: LFortran Refactors, and Compile Time Evaluations &amp;lt;&amp;ndash; You are here!</description></item><item><title>GSoC21 W7: LFortran Workflow Basics</title><link>https://rgoswami.me/posts/gsoc21-w7/</link><pubDate>Fri, 23 Jul 2021 22:33:00 +0000</pubDate><guid>https://rgoswami.me/posts/gsoc21-w7/</guid><description>Revisiting minidftatom and a birds eye view of lfortran
Background Serialized update for the 2021 Google Summer of Code under the fortran-lang organization, mentored by Ondrej Certik.
Series This post is part of a series based around my weekly GSoC21 project check-ins.
GSoC21 W1: LFortran Kickoff GSoC21 W2: LFortran Unraveling GSoC21 W3: Kind, Characters, and Standards GSoC21 W4: LFortran, Backends and Bugs GSoC21 W5: LFortran Design Details and minidftatom GSoC21 W6: LFortran ASR and Values GSoC21 W7: LFortran Workflow Basics &amp;lt;&amp;ndash; You are here!</description></item><item><title>GSoC21 W6: LFortran ASR and Values</title><link>https://rgoswami.me/posts/gsoc21-w6/</link><pubDate>Fri, 16 Jul 2021 17:19:00 +0000</pubDate><guid>https://rgoswami.me/posts/gsoc21-w6/</guid><description>Enriching ASR nodes at compile time
Background Serialized update for the 2021 Google Summer of Code under the fortran-lang organization, mentored by Ondrej Certik.
Series This post is part of a series based around my weekly GSoC21 project check-ins.
GSoC21 W1: LFortran Kickoff
GSoC21 W2: LFortran Unraveling
GSoC21 W3: Kind, Characters, and Standards
GSoC21 W4: LFortran, Backends and Bugs
GSoC21 W5: LFortran Design Details and minidftatom
GSoC21 W6: LFortran ASR and Values &amp;lt;&amp;ndash; You are here!</description></item><item><title>GSoC21 W5: LFortran Design Details and minidftatom</title><link>https://rgoswami.me/posts/gsoc21-w5/</link><pubDate>Fri, 09 Jul 2021 19:23:00 +0000</pubDate><guid>https://rgoswami.me/posts/gsoc21-w5/</guid><description>Project scaffolding and compiler design
Background Serialized update for the 2021 Google Summer of Code under the fortran-lang organization, mentored by Ondrej Certik.
Series This post is part of a series based around my weekly GSoC21 project check-ins.
GSoC21 W1: LFortran Kickoff
GSoC21 W2: LFortran Unraveling
GSoC21 W3: Kind, Characters, and Standards
GSoC21 W4: LFortran, Backends and Bugs
GSoC21 W5: LFortran Design Details and minidftatom &amp;lt;&amp;ndash; You are here!</description></item><item><title>GSoC21 W4: LFortran, Backends and Bugs</title><link>https://rgoswami.me/posts/gsoc21-w4/</link><pubDate>Fri, 02 Jul 2021 23:26:00 +0000</pubDate><guid>https://rgoswami.me/posts/gsoc21-w4/</guid><description>Towards the mid-summer evaluation and redirecting efforts
Background Serialized update for the 2021 Google Summer of Code under the fortran-lang organization, mentored by Ondrej Certik.
Series This post is part of a series based around my weekly GSoC21 project check-ins.
GSoC21 W1: LFortran Kickoff
GSoC21 W2: LFortran Unraveling
GSoC21 W3: Kind, Characters, and Standards
GSoC21 W4: LFortran, Backends and Bugs &amp;lt;&amp;ndash; You are here!
GSoC21 W5: LFortran Design Details and minidftatom</description></item><item><title>GSoC21 W3: Kind, Characters, and Standards</title><link>https://rgoswami.me/posts/gsoc21-w3/</link><pubDate>Sat, 26 Jun 2021 00:28:00 +0000</pubDate><guid>https://rgoswami.me/posts/gsoc21-w3/</guid><description>Standard practice pragmatic approaches to kind for dftatom
Background Serialized update for the 2021 Google Summer of Code under the fortran-lang organization, mentored by Ondrej Certik.
Series This post is part of a series based around my weekly GSoC21 project check-ins.
GSoC21 W1: LFortran Kickoff
GSoC21 W2: LFortran Unraveling
GSoC21 W3: Kind, Characters, and Standards &amp;lt;&amp;ndash; You are here!
GSoC21 W4: LFortran, Backends and Bugs
GSoC21 W5: LFortran Design Details and minidftatom</description></item><item><title>GSoC21 W2: LFortran Unraveling</title><link>https://rgoswami.me/posts/gsoc21-w2/</link><pubDate>Fri, 18 Jun 2021 18:59:00 +0000</pubDate><guid>https://rgoswami.me/posts/gsoc21-w2/</guid><description>Delving into language standards and back-ends for lfortran
Background As discussed in a previous post in this series, I have been spending roughly half of each working day with LFortran as part of the 2021 Google Summer of Code under the fortran-lang organization, mentored by Ondrej Certik.
Series This post is part of a series based around my weekly GSoC21 project check-ins.
GSoC21 W1: LFortran Kickoff
GSoC21 W2: LFortran Unraveling &amp;lt;&amp;ndash; You are here!</description></item><item><title>GSoC21 W1: LFortran Kickoff</title><link>https://rgoswami.me/posts/gsoc21-w1/</link><pubDate>Sat, 12 Jun 2021 00:57:00 +0000</pubDate><guid>https://rgoswami.me/posts/gsoc21-w1/</guid><description>Charting paths towards concrete lfortran usage
Background As mentioned in an earlier post, I have had the immense pleasure of continuing development of the disruptive lfortran compiler under the aegis of the Fortran Lang organization, financed by the Google Summer of Code and mentored ably by Ondrej Certik. A rather interesting consequence of this is that we are strongly encouraged to write a precis of our activities each week. This is mine, given that the clock starting winding down (full timeline) last Monday.</description></item></channel></rss>