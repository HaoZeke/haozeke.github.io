<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>build on Rohit Goswami</title><link>https://rgoswami.me/tags/build/</link><description>Recent content in build on Rohit Goswami</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0&lt;/a>.</copyright><lastBuildDate>Wed, 01 Nov 2023 04:33:00 +0000</lastBuildDate><atom:link href="https://rgoswami.me/tags/build/index.xml" rel="self" type="application/rss+xml"/><item><title>Local precommit dependencies</title><link>https://rgoswami.me/snippets/local-precommit-dependencies/</link><pubDate>Wed, 01 Nov 2023 04:33:00 +0000</pubDate><guid>https://rgoswami.me/snippets/local-precommit-dependencies/</guid><description>Recently a bunch of my pre-commit CI jobs started failing due to dependency resolution issues. The easiest way to ensure reliable usage is to have locally installed tools used. Consider:
1- repo: https://github.com/pocc/pre-commit-hooks 2 rev: v1.3.5 3 hooks: 4 - id: cppcheck 5 args: [&amp;#34;--error-exitcode=0&amp;#34;] Which leaves one dependent on an external repo. This can be rewritten as:
1- repo: local 2 hooks: 3 - id: cppcheck 4 name: cppcheck 5 entry: cppcheck 6 language: system 7 types_or: [c++, c] 8 args: [&amp;#34;--error-exitcode=0&amp;#34;] With this local setup, it is necessary to adjust the CI configuration:</description></item><item><title>Auto-discovering meson tests</title><link>https://rgoswami.me/snippets/auto-disc-meson-tests/</link><pubDate>Wed, 22 Mar 2023 13:59:00 +0000</pubDate><guid>https://rgoswami.me/snippets/auto-disc-meson-tests/</guid><description>One of the things I missed when I migrated from cmake to meson was the ease at which cmake discovers tests.
1# Tests 2option(PACKAGE_TESTS &amp;#34;Build the tests&amp;#34; OFF) 3if(PACKAGE_TESTS) 4 find_package(GTest REQUIRED) 5 enable_testing() 6 include(GoogleTest) 7 add_subdirectory(gtests) 8endif() Thankfully, meson can kind of emulate this behavior, even in its restricted syntax. The key concept is arrays and their iterators.
1test_array = [# 2 # [&amp;#39;Pretty name&amp;#39;, &amp;#39;binary_name&amp;#39;, &amp;#39;BlahTest.cpp&amp;#39;] 3 [&amp;#39;String parser helpers&amp;#39;, &amp;#39;strparse_run&amp;#39;, &amp;#39;StringHelpersTest.</description></item></channel></rss>