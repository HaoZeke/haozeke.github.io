<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cpp on Rohit Goswami</title><link>https://rgoswami.me/tags/cpp/</link><description>Recent content in cpp on Rohit Goswami</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0&lt;/a>.</copyright><lastBuildDate>Wed, 28 Jun 2023 11:27:00 +0000</lastBuildDate><atom:link href="https://rgoswami.me/tags/cpp/index.xml" rel="self" type="application/rss+xml"/><item><title>CPP Library Blueprints for Python Bindings</title><link>https://rgoswami.me/posts/cpp-library-blueprints-pybind/</link><pubDate>Wed, 28 Jun 2023 11:27:00 +0000</pubDate><guid>https://rgoswami.me/posts/cpp-library-blueprints-pybind/</guid><description>Design guidelines for thin Python wrappers to C++ libraries
Background I recently ended up writing and rewriting a series of libraries to essentially get them to a point where I could write bindings to them. In doing so, some thoughts on design have evolved into this post.
False starts Originally, I had the library and bindings in one repository, which was easier to hack on, and had fewer moving parts.</description></item><item><title>Auto-discovering meson tests</title><link>https://rgoswami.me/snippets/auto-disc-meson-tests/</link><pubDate>Wed, 22 Mar 2023 13:59:00 +0000</pubDate><guid>https://rgoswami.me/snippets/auto-disc-meson-tests/</guid><description>One of the things I missed when I migrated from cmake to meson was the ease at which cmake discovers tests.
1# Tests 2option(PACKAGE_TESTS &amp;#34;Build the tests&amp;#34; OFF) 3if(PACKAGE_TESTS) 4 find_package(GTest REQUIRED) 5 enable_testing() 6 include(GoogleTest) 7 add_subdirectory(gtests) 8endif() Thankfully, meson can kind of emulate this behavior, even in its restricted syntax. The key concept is arrays and their iterators.
1test_array = [# 2 # [&amp;#39;Pretty name&amp;#39;, &amp;#39;binary_name&amp;#39;, &amp;#39;BlahTest.cpp&amp;#39;] 3 [&amp;#39;String parser helpers&amp;#39;, &amp;#39;strparse_run&amp;#39;, &amp;#39;StringHelpersTest.</description></item><item><title>Talk Supplements for IOP's C++ Workshop</title><link>https://rgoswami.me/posts/iop-cpp-2021-meta/</link><pubDate>Wed, 14 Apr 2021 01:17:00 +0000</pubDate><guid>https://rgoswami.me/posts/iop-cpp-2021-meta/</guid><description>A meta-post on the workshop I held for the IOP student community on Intermediate C++
Background Much the same as the rationale behind my other presentation meta-posts, that is:
I would like to preserve questions I would like to collect the video, slides and other miscellaneous stuff in one locationÂ 1 It would be nice to have my own thoughts here afterwards Details Blurb verbatim from the workshop announcement.</description></item><item><title>Publishing Doxygen and Sphinx with Nix and Rake</title><link>https://rgoswami.me/posts/pub-doc-cpp-dox-sph-nix/</link><pubDate>Tue, 22 Sep 2020 10:30:00 +0000</pubDate><guid>https://rgoswami.me/posts/pub-doc-cpp-dox-sph-nix/</guid><description>Automating documenation deployment with Travis, rake and nix
Background In the previous post we generated documentation using Doxygen with Exhale to handle Sphinx. Now we will clean up the earlier workflow with rake and ensure the environment is reproducible with nix while deploying to Travis CI.
Series Documenting C++ with Doxygen and Sphinx - Exhale Publishing Doxygen and Sphinx with Nix and Rake &amp;lt;&amp;ndash; You are here Documenting C++ with Doxygen and Sphinx - doxyrest Adding Tutorials to Sphinx Projects Setup A quick reminder of the setup we generated in the last post:</description></item><item><title>Documenting C++ with Doxygen and Sphinx - Exhale</title><link>https://rgoswami.me/posts/doc-cpp-dox-sph-exhale/</link><pubDate>Tue, 22 Sep 2020 06:58:00 +0000</pubDate><guid>https://rgoswami.me/posts/doc-cpp-dox-sph-exhale/</guid><description>This post outlines a basic workflow for C++ projects using Doxygen, Sphinx, and Exhale.
Background My project proposal for documenting Symengine was recently accepted for the Google Summer of Docs initiative. In the past I have been more than happy to document C++ code using only Doxygen (with pretty fantastic results), while keeping example usage separate (d-SEAMS wiki). Though this is still a feasible method, a monolithic multi-project setup might benefit from Sphinx, which is what will be covered.</description></item></channel></rss>