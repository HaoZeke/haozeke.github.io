<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Fortran Frontiers: Bridging Legacy to Modernity on Rohit Goswami</title><link>https://rgoswami.me/series/fortran-frontiers-bridging-legacy-to-modernity/</link><description>Recent content in Fortran Frontiers: Bridging Legacy to Modernity on Rohit Goswami</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0&lt;/a>.</copyright><lastBuildDate>Thu, 27 Apr 2023 16:09:00 +0000</lastBuildDate><atom:link href="https://rgoswami.me/series/fortran-frontiers-bridging-legacy-to-modernity/index.xml" rel="self" type="application/rss+xml"/><item><title>Handling Legacy Fortran Code</title><link>https://rgoswami.me/posts/handling-legacy-fortran-code/</link><pubDate>Thu, 27 Apr 2023 16:09:00 +0000</pubDate><guid>https://rgoswami.me/posts/handling-legacy-fortran-code/</guid><description>A short pseudo-tutorial post on working with inherited Fortran.
Background In-spite of the many claims by upper management (e.g.Â at LANL) regarding the death of Fortran, most people with even a passing interest in academic research within STEM fields will interact with Fortran code, and the community has only been improving with time Kedward et al. (2022). Rewriting is not typically an option, or a good use of time. This set of posts should be applicable to any blackbox legacy fortran code, though the specific example here is one from my own field (computational chemistry).</description></item></channel></rss>