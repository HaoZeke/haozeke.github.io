<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GSoC21: LFortran on Rohit Goswami</title><link>https://rgoswami.me/series/gsoc21-lfortran/</link><description>Recent content in GSoC21: LFortran on Rohit Goswami</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0&lt;/a>.</copyright><lastBuildDate>Fri, 20 Aug 2021 00:43:00 +0000</lastBuildDate><atom:link href="https://rgoswami.me/series/gsoc21-lfortran/index.xml" rel="self" type="application/rss+xml"/><item><title>GSoC21 LFortran and Computational Chemistry</title><link>https://rgoswami.me/posts/gsoc21-fin-reprot/</link><pubDate>Fri, 20 Aug 2021 00:43:00 +0000</pubDate><guid>https://rgoswami.me/posts/gsoc21-fin-reprot/</guid><description>Directed recollections of the GSoC21 timeline
Background If the last ten weeks of weekly posts have not made it clear; as a student developer in the Google Summer of Code in the year 2021; I was privileged to work on the LFortran compiler alongside Gagandeep Singh and Thirumalai Shaktivel under the fantastic mentorship of Ondřej Čertík under the Fortran-Lang organization.
Pencil Pushing This section describes the overall work done in a manner designed to delight minds enamoured by brevity and numbers.</description></item><item><title>GSoC21 W10: LFortran Runtime Library Design</title><link>https://rgoswami.me/posts/gsoc21-w10/</link><pubDate>Sat, 14 Aug 2021 00:28:00 +0000</pubDate><guid>https://rgoswami.me/posts/gsoc21-w10/</guid><description>The road to accurate elementary intrinsic functions is paved with IEEE/ISO standards
Background Serialized update for the 2021 Google Summer of Code under the fortran-lang organization, mentored by Ondrej Certik.
Logistics Met with Ondrej daily from Sunday till Friday On Sunday we finished the compile time evaluation design (partially) Ondrej finished the rest overnight On Monday, we started co working on runtime implemenations Also added some more compile time stuff and pointers to clean things up Ondrej fixed a longstanding bug in the deserialise of serialized mod On Wednesday there was more scaffolding work done on the generics Added another implicit cast On Thursday we implemented an all fortran sin function Just as accurate as gfortran Compiles with LFortran Also fixed another serialization bug (floats were being truncated) On Friday we redesigned the runtime library Also discussed future plans and longterm goals Opened discussions around the runtime library and elementary function accuracy on the Zulip instance Considered adding fortran versions of LAMMPS (F77 and F90) to the compilation plans Overview This was most definitely my most productive week by far.</description></item><item><title>GSoC21 W9: LFortran Bug Hunting Bonanza</title><link>https://rgoswami.me/posts/gsoc21-w9/</link><pubDate>Fri, 06 Aug 2021 19:50:00 +0000</pubDate><guid>https://rgoswami.me/posts/gsoc21-w9/</guid><description>Continuing compile time intrinsic functions, ASR passes, and testing LAPACK
Background Serialized update for the 2021 Google Summer of Code under the fortran-lang organization, mentored by Ondrej Certik.
Logistics Daily checkins over Zulip Code reviews on Gitlab Met with Ondrej and Thirumalai on Thursday Discussed comments and how to attach them Decided that it would make sense to possibly store the comments in the ASR to make sure that the comments are attached to the right nodes We discussed a set of outputs for the next week and wrap uppolicies It was fun to see some of Thirumalai&amp;rsquo;s work in person!</description></item><item><title>GSoC21 W8: LFortran Refactors, and Compile Time Evaluations</title><link>https://rgoswami.me/posts/gsoc21-w8/</link><pubDate>Fri, 30 Jul 2021 17:11:00 +0000</pubDate><guid>https://rgoswami.me/posts/gsoc21-w8/</guid><description>Language standardese and implementations
Background Serialized update for the 2021 Google Summer of Code under the fortran-lang organization, mentored by Ondrej Certik.
Logistics Discussed more refactors over MRs and Zulip Overview Intrinsic functions and more bug hunting. A lot of starts in different directions, but I will need to trim these down a bit. A major goal was working through the compile time evaluation of some intrinsic functions.
New Merge Requests Split ast_to_asr An MR started last week, completed and approved this week tiny: Runtime implementation skeleton What will eventually be compiled, hooks into C for now tiny: Compile time implementation The population of value for tiny function calls Draft: Shift runtime intrinsic design Harmonizing the code-base, much of this is cleaning up my own earlier math implementations Draft: expr_value for Kind A WIP MR which will clean up the slightly strange extract_kind function Draft: Implement where construct An MR along the lines of if, related but distinct from Gagandeep&amp;rsquo;s masked optimization WIP Freshly Assigned Issues &amp;ndash;show-asr For larger values A visual glitch in the prettied output Additional Tasks Some of my earlier clean up MRs are beginning to stagnate (CI stuff), will have to catch up on them.</description></item><item><title>GSoC21 W7: LFortran Workflow Basics</title><link>https://rgoswami.me/posts/gsoc21-w7/</link><pubDate>Fri, 23 Jul 2021 22:33:00 +0000</pubDate><guid>https://rgoswami.me/posts/gsoc21-w7/</guid><description>Revisiting minidftatom and a birds eye view of lfortran
Background Serialized update for the 2021 Google Summer of Code under the fortran-lang organization, mentored by Ondrej Certik.
Logistics Met with Ondrej on Tuesday Went over the debugging workflow Discussed the design of the SymbolTableVisitor and BodyVisitor Fixed a symbol scoping bug and discussed implementing value for kind Kept in touch asynchrously over Zulip and MRs Overview This week focused on implementing features and cleaning up parts of the project.</description></item><item><title>GSoC21 W6: LFortran ASR and Values</title><link>https://rgoswami.me/posts/gsoc21-w6/</link><pubDate>Fri, 16 Jul 2021 17:19:00 +0000</pubDate><guid>https://rgoswami.me/posts/gsoc21-w6/</guid><description>Enriching ASR nodes at compile time
Background Serialized update for the 2021 Google Summer of Code under the fortran-lang organization, mentored by Ondrej Certik.
Logistics Met with Ondrej on Monday and Wednesday Discussed the design choices w.r.t. class hierarchies (and the lack thereof) Overview Note that the title is rather misleading, this post has nothing to do with the values of the LFortran project (which are by the way, fantastic), but instead is about adding more detail to the ASR nodes.</description></item><item><title>GSoC21 W5: LFortran Design Details and minidftatom</title><link>https://rgoswami.me/posts/gsoc21-w5/</link><pubDate>Fri, 09 Jul 2021 19:23:00 +0000</pubDate><guid>https://rgoswami.me/posts/gsoc21-w5/</guid><description>Project scaffolding and compiler design
Background Serialized update for the 2021 Google Summer of Code under the fortran-lang organization, mentored by Ondrej Certik.
Logistics Met with Ondrej on Tuesday, Wednesday and Thursday Discussed the AST, ASR and backends in more detail Zeroed in on several alternate designs implementations of intrinsic functions We have prototype calls for the two kinds of compile evaluation My sin implementation (pre-GSoC21) is pretty unwieldy and a cleaner method which we elected to pursue is the minval strategy Discussed concrete methods of working Talked about the runtime library This is a late stage issue, after the ASR generation Overview This week focused around a subset of dftatom which Ondrej prepared.</description></item><item><title>GSoC21 W4: LFortran, Backends and Bugs</title><link>https://rgoswami.me/posts/gsoc21-w4/</link><pubDate>Fri, 02 Jul 2021 23:26:00 +0000</pubDate><guid>https://rgoswami.me/posts/gsoc21-w4/</guid><description>Towards the mid-summer evaluation and redirecting efforts
Background Serialized update for the 2021 Google Summer of Code under the fortran-lang organization, mentored by Ondrej Certik.
Overview This week was a bit of a sticky wicket. My unfamiliarity with the LLVM backend and its internals caught up with me just around the same time I ran into several fixture and rent related idiosyncrasies which led to yet another shift in my weekly meeting.</description></item><item><title>GSoC21 W3: Kind, Characters, and Standards</title><link>https://rgoswami.me/posts/gsoc21-w3/</link><pubDate>Sat, 26 Jun 2021 00:28:00 +0000</pubDate><guid>https://rgoswami.me/posts/gsoc21-w3/</guid><description>Standard practice pragmatic approaches to kind for dftatom
Background Serialized update for the 2021 Google Summer of Code under the fortran-lang organization, mentored by Ondrej Certik.
Logistics Met with Ondrej on Tuesday Went over my kind implementation Merged older approved MRs Worked on generating tests Talked about the test methodology in general Most of the tests are better off in their integration form (discussed below) Some aspects of the passes may be tested using the doctest setup Set an additional time to discuss the implementation of assumed length character declarations These are not actually used in any dftatom routines but they are very common for utility functions Met with Ondrej on Thursday Discussed repercussions of backends Better, more explicit ASR rules can stem from not relying on the CPP backend Talked about the number of passes (SRC-&amp;gt;AST-&amp;gt;ASR-&amp;gt;LLVM) Started working on getting the right thing happen when faced with character(len=*) Overview This week also saw an increase in community activities on the Fortran discourse, since the J3 meeting is now underway and user polling 1 is in full swing.</description></item><item><title>GSoC21 W2: LFortran Unraveling</title><link>https://rgoswami.me/posts/gsoc21-w2/</link><pubDate>Fri, 18 Jun 2021 18:59:00 +0000</pubDate><guid>https://rgoswami.me/posts/gsoc21-w2/</guid><description>Delving into language standards and back-ends for lfortran
Background As discussed in a previous post in this series, I have been spending roughly half of each working day with LFortran as part of the 2021 Google Summer of Code under the fortran-lang organization, mentored by Ondrej Certik.
Logistics Some of the meeting points are to be expanded on below.
Met with Ondrej on Tuesday, as discussed previously Talked about language server implementations Looked into rtags and generating a compilation-database Discussed how the C++ concept of having file based units makes this simpler than the Fortran form, which recognizes no file based program units Talked about the status of the different back-ends Discussed LLVM and MLIR, in the context of Flang (the f18 compiler) Also briefly touched upon legacy-flang and historical issues Discussed standardization of the mod-files Decided this is not a good idea, because a lot of build systems expect Fortran compilers to generate .</description></item><item><title>GSoC21 W1: LFortran Kickoff</title><link>https://rgoswami.me/posts/gsoc21-w1/</link><pubDate>Sat, 12 Jun 2021 00:57:00 +0000</pubDate><guid>https://rgoswami.me/posts/gsoc21-w1/</guid><description>Charting paths towards concrete lfortran usage
Background As mentioned in an earlier post, I have had the immense pleasure of continuing development of the disruptive lfortran compiler under the aegis of the Fortran Lang organization, financed by the Google Summer of Code and mentored ably by Ondrej Certik. A rather interesting consequence of this is that we are strongly encouraged to write a precis of our activities each week. This is mine, given that the clock starting winding down (full timeline) last Monday.</description></item></channel></rss>